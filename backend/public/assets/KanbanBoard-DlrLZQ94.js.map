{"version":3,"file":"KanbanBoard-DlrLZQ94.js","sources":["../../src/components/visualizations/KanbanBoard.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Card, Alert, Spinner, Badge, Button, Dropdown, Modal, Form, Col, Row } from 'react-bootstrap';\nimport { DragDropContext, Droppable, Draggable, DropResult } from 'react-beautiful-dnd';\nimport { PurchaseOrder, POStatus } from '@/types/purchaseOrder';\nimport { ApiService } from '@/services/ApiService';\nimport Logger from '@/utils/logger';\nimport { format } from 'date-fns';\n\n// Props for the KanbanBoard component\ninterface KanbanBoardProps {\n  groupBy?: 'status' | 'supplier' | 'location' | 'buyer';\n  sortBy?: 'orderDate' | 'amount' | 'dueDate' | 'priority';\n  filterStatus?: 'all' | 'open' | 'completed' | 'custom';\n  onPOSelect?: (poNumber: string) => void;\n  onStatusChange?: (poNumber: string, newStatus: POStatus) => void;\n  onComponentRender?: (renderTime: number) => void;\n  className?: string;\n}\n\n// Column interface for the Kanban board\ninterface KanbanColumn {\n  id: string;\n  title: string;\n  items: PurchaseOrder[];\n  color?: string;\n}\n\n/**\n * KanbanBoard Component\n * \n * Displays purchase orders in a Kanban board layout with draggable cards.\n * Allows organizing POs by status, supplier, location, or buyer.\n * Supports drag-and-drop for status transitions and visual organization.\n */\nconst KanbanBoard: React.FC<KanbanBoardProps> = ({\n  groupBy = 'status',\n  sortBy = 'orderDate',\n  filterStatus = 'all',\n  onPOSelect,\n  onStatusChange,\n  onComponentRender,\n  className = ''\n}) => {\n  // Performance tracking\n  const renderStartTime = useRef<number>(performance.now());\n\n  // State\n  const [columns, setColumns] = useState<KanbanColumn[]>([]);\n  \n  // Loading and error states\n  const [loading, setLoading] = useState<boolean>(true);\n  const [localGroupBy, setGroupBy] = useState<'status' | 'supplier' | 'location' | 'buyer'>(groupBy);\n  const [localSortBy, setSortBy] = useState<'orderDate' | 'amount' | 'dueDate' | 'priority'>(sortBy);\n  const [error, setError] = useState<string | null>(null);\n\n  // Filter state\n  const [showFilterModal, setShowFilterModal] = useState<boolean>(false);\n  const [filterKeyword, setFilterKeyword] = useState<string>(\"\");\n  \n  // Mock purchase orders data\n  const mockPurchaseOrders: PurchaseOrder[] = [\n    {\n      header: {\n        poNumber: 'PO123456',\n        status: POStatus.CONFIRMED,\n        orderDate: '2025-03-01T08:00:00',\n        buyerInfo: {\n          firstName: 'John',\n          lastName: 'Doe',\n          email: 'john.doe@example.com'\n        },\n        syscoLocation: {\n          name: 'Denver Warehouse',\n          address: '123 Supply Chain Dr, Denver, CO'\n        },\n        deliveryInfo: {\n          date: '2025-03-15T08:00:00',\n          instructions: 'Deliver to loading dock B'\n        }\n      },\n      totalCost: 12500,\n      products: [{ supc: '123', description: 'Item 1', quantity: 100, fobCost: 125, total: 12500 }],\n      weights: { grossWeight: 1000, netWeight: 950 },\n      revision: 1\n    },\n    {\n      header: {\n        poNumber: 'PO123457',\n        status: POStatus.SHIPPED,\n        orderDate: '2025-03-05T10:30:00',\n        buyerInfo: {\n          firstName: 'Jane',\n          lastName: 'Smith',\n          email: 'jane.smith@example.com'\n        },\n        syscoLocation: {\n          name: 'Seattle Distribution',\n          address: '456 Logistics Ave, Seattle, WA'\n        },\n        deliveryInfo: {\n          date: '2025-03-18T09:00:00',\n          instructions: 'Call ahead 30 minutes before arrival'\n        }\n      },\n      totalCost: 8750,\n      products: [{ supc: '456', description: 'Item 2', quantity: 50, fobCost: 175, total: 8750 }],\n      weights: { grossWeight: 800, netWeight: 750 },\n      revision: 1\n    },\n    {\n      header: {\n        poNumber: 'PO123458',\n        status: POStatus.DELIVERED,\n        orderDate: '2025-03-10T09:15:00',\n        buyerInfo: {\n          firstName: 'Robert',\n          lastName: 'Johnson',\n          email: 'robert.johnson@example.com'\n        },\n        syscoLocation: {\n          name: 'Atlanta Hub',\n          address: '789 Supply St, Atlanta, GA'\n        },\n        deliveryInfo: {\n          date: '2025-03-22T08:30:00'\n        }\n      },\n      totalCost: 4300,\n      products: [{ supc: '789', description: 'Item 3', quantity: 20, fobCost: 215, total: 4300 }],\n      weights: { grossWeight: 500, netWeight: 480 },\n      revision: 1\n    },\n    {\n      header: {\n        poNumber: 'PO123459',\n        status: POStatus.UPLOADED,\n        orderDate: '2025-03-12T14:00:00',\n        buyerInfo: {\n          firstName: 'Susan',\n          lastName: 'Miller',\n          email: 'susan.miller@example.com'\n        },\n        syscoLocation: {\n          name: 'Chicago Distribution',\n          address: '101 Warehouse Blvd, Chicago, IL'\n        },\n        deliveryInfo: {\n          date: '2025-03-25T10:00:00'\n        }\n      },\n      totalCost: 6200,\n      products: [{ supc: '101', description: 'Item 4', quantity: 40, fobCost: 155, total: 6200 }],\n      weights: { grossWeight: 600, netWeight: 575 },\n      revision: 1\n    },\n    {\n      header: {\n        poNumber: 'PO123460',\n        status: POStatus.INVOICED,\n        orderDate: '2025-03-08T11:45:00',\n        buyerInfo: {\n          firstName: 'Michael',\n          lastName: 'Brown',\n          email: 'michael.brown@example.com'\n        },\n        syscoLocation: {\n          name: 'Boston Depot',\n          address: '555 Northeast Blvd, Boston, MA'\n        },\n        deliveryInfo: {\n          date: '2025-03-20T14:00:00'\n        }\n      },\n      totalCost: 9300,\n      products: [{ supc: '555', description: 'Item 5', quantity: 60, fobCost: 155, total: 9300 }],\n      weights: { grossWeight: 850, netWeight: 800 },\n      revision: 1\n    },\n    {\n      header: {\n        poNumber: 'PO123461',\n        status: POStatus.CANCELLED,\n        orderDate: '2025-03-03T09:30:00',\n        buyerInfo: {\n          firstName: 'Emily',\n          lastName: 'Davis',\n          email: 'emily.davis@example.com'\n        },\n        syscoLocation: {\n          name: 'Miami Center',\n          address: '888 Sunny Ave, Miami, FL'\n        },\n        deliveryInfo: {\n          date: '2025-03-17T13:00:00'\n        }\n      },\n      totalCost: 5400,\n      products: [{ supc: '888', description: 'Item 6', quantity: 30, fobCost: 180, total: 5400 }],\n      weights: { grossWeight: 450, netWeight: 425 },\n      revision: 1\n    }\n  ];\n  \n  // Initialize board by grouping purchase orders into columns\n  useEffect(() => {\n    const start = performance.now();\n    renderStartTime.current = start;\n    \n    fetchData();\n    \n    return () => {\n      Logger.debug(`[KANBAN] Component rerendered in ${performance.now() - start}ms`);\n    };\n  }, [localGroupBy, localSortBy]);\n  \n  // Fetch purchase order data from API\n  const fetchData = async () => {\n    setLoading(true);\n    \n    try {\n      // Get current date and date from 30 days ago\n      const now = new Date();\n      const thirtyDaysAgo = new Date(now);\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      \n      // Fetch purchase orders from API\n      const response = await ApiService.fetchPOs({\n        startDate: thirtyDaysAgo.toISOString(),\n        endDate: now.toISOString(),\n        limit: 100\n      });\n      \n      if (response && response.data && response.data.length > 0) {\n        Logger.info(`Found ${response.data.length} POs for kanban board`);\n        \n        // Group and sort the purchase orders\n        const groupedColumns = createGroupedColumns(response.data, localGroupBy, localSortBy);\n        setColumns(groupedColumns);\n        setLoading(false);\n        \n        // Report rendering time if callback is provided\n        if (onComponentRender) {\n          const renderTime = performance.now() - renderStartTime.current;\n          onComponentRender(renderTime);\n        }\n      } else {\n        Logger.info('No POs found in API');\n        \n        // Only use mock data in development mode\n        if (process.env.NODE_ENV === 'development') {\n          Logger.info('Using mock data for development');\n          const groupedColumns = createGroupedColumns(mockPurchaseOrders, localGroupBy, localSortBy);\n          setColumns(groupedColumns);\n          setError('No PO data found. Using sample data for development purposes only.');\n          \n          // Report rendering time if callback is provided\n          if (onComponentRender) {\n            const renderTime = performance.now() - renderStartTime.current;\n            onComponentRender(renderTime);\n          }\n        } else {\n          setColumns([]);\n          setError('No purchase order data found in the selected filters.');\n        }\n        \n        setLoading(false);\n      }\n    } catch (err) {\n      Logger.error('Error fetching purchase orders:', err);\n      setError(`Failed to load kanban board data: ${err instanceof Error ? err.message : String(err)}`);\n      \n      // Only use mock data in development mode\n      if (process.env.NODE_ENV === 'development') {\n        Logger.info('Using mock data for development');\n        const groupedColumns = createGroupedColumns(mockPurchaseOrders, localGroupBy, localSortBy);\n        setColumns(groupedColumns);\n        \n        // Report rendering time if callback is provided\n        if (onComponentRender) {\n          const renderTime = performance.now() - renderStartTime.current;\n          onComponentRender(renderTime);\n        }\n      } else {\n        setColumns([]);\n        setError('Error loading data: check your network connection');\n      }\n      setLoading(false);\n    }\n  };\n  \n  // Create columns based on the groupBy parameter\n  const createGroupedColumns = (\n    purchaseOrders: PurchaseOrder[], \n    grouping: string, \n    sorting: string\n  ): KanbanColumn[] => {\n    let groups: Record<string, PurchaseOrder[]> = {};\n    let columnData: KanbanColumn[] = [];\n    \n    // Apply filter status if needed\n    let filteredPOs = purchaseOrders;\n    if (filterStatus !== 'all') {\n      filteredPOs = purchaseOrders.filter(po => {\n        if (filterStatus === 'open') {\n          return [POStatus.UPLOADED, POStatus.CONFIRMED].includes(po.header.status);\n        } else if (filterStatus === 'completed') {\n          return [POStatus.DELIVERED, POStatus.INVOICED].includes(po.header.status);\n        }\n        return true; // 'custom' or other values\n      });\n    }\n    \n    // Group purchase orders\n    if (grouping === 'status') {\n      // Create a column for each status\n      const statusOrder = [\n        POStatus.UPLOADED,\n        POStatus.CONFIRMED,\n        POStatus.SHIPPED,\n        POStatus.INVOICED,\n        POStatus.DELIVERED,\n        POStatus.CANCELLED\n      ];\n      \n      // Initialize empty groups for each status\n      statusOrder.forEach(status => {\n        groups[status] = [];\n      });\n      \n      // Group POs by status\n      filteredPOs.forEach(po => {\n        const status = po.header.status;\n        if (!groups[status]) {\n          groups[status] = [];\n        }\n        groups[status].push(po);\n      });\n      \n      // Create columns in the specified order\n      columnData = statusOrder.map(status => {\n        return {\n          id: status,\n          title: status,\n          items: sortPurchaseOrders(groups[status] || [], sorting),\n          color: getStatusColor(status)\n        };\n      });\n    } else if (grouping === 'supplier' || grouping === 'location') {\n      // Group by supplier/location name\n      filteredPOs.forEach(po => {\n        const key = grouping === 'supplier' \n          ? po.header.syscoLocation.name \n          : po.header.syscoLocation.name;\n          \n        if (!groups[key]) {\n          groups[key] = [];\n        }\n        groups[key].push(po);\n      });\n      \n      // Create a column for each unique supplier/location\n      columnData = Object.keys(groups).map(key => ({\n        id: key,\n        title: key,\n        items: sortPurchaseOrders(groups[key], sorting)\n      }));\n    } else if (grouping === 'buyer') {\n      // Group by buyer\n      filteredPOs.forEach(po => {\n        const key = `${po.header.buyerInfo.firstName} ${po.header.buyerInfo.lastName}`;\n        if (!groups[key]) {\n          groups[key] = [];\n        }\n        groups[key].push(po);\n      });\n      \n      // Create a column for each unique buyer\n      columnData = Object.keys(groups).map(key => ({\n        id: key,\n        title: key,\n        items: sortPurchaseOrders(groups[key], sorting)\n      }));\n    }\n    \n    return columnData;\n  };\n  \n  // Sort purchase orders based on the sortBy parameter\n  const sortPurchaseOrders = (purchaseOrders: PurchaseOrder[], sortCriteria: string): PurchaseOrder[] => {\n    return [...purchaseOrders].sort((a, b) => {\n      switch (sortCriteria) {\n        case 'orderDate':\n          return new Date(a.header.orderDate).getTime() - new Date(b.header.orderDate).getTime();\n          \n        case 'amount':\n          return (b.totalCost || 0) - (a.totalCost || 0);\n          \n        case 'dueDate':\n          const aDueDate = a.header.deliveryInfo?.date \n            ? new Date(a.header.deliveryInfo.date).getTime() \n            : Number.MAX_SAFE_INTEGER;\n            \n          const bDueDate = b.header.deliveryInfo?.date \n            ? new Date(b.header.deliveryInfo.date).getTime() \n            : Number.MAX_SAFE_INTEGER;\n            \n          return aDueDate - bDueDate;\n          \n        // Priority would typically come from the PO data\n        case 'priority':\n          // Mocked priority - in a real app this would use an actual priority field\n          const priorityMap: Record<POStatus, number> = {\n            [POStatus.UPLOADED]: 1,\n            [POStatus.CONFIRMED]: 2,\n            [POStatus.SHIPPED]: 3,\n            [POStatus.INVOICED]: 4,\n            [POStatus.DELIVERED]: 5,\n            [POStatus.CANCELLED]: 6\n          };\n          \n          return priorityMap[a.header.status] - priorityMap[b.header.status];\n          \n        default:\n          return 0;\n      }\n    });\n  };\n  \n  // Get appropriate color for a status\n  const getStatusColor = (status: string): string => {\n    switch (status) {\n      case POStatus.UPLOADED:\n        return '#FF9800'; // Orange\n      case POStatus.CONFIRMED:\n        return '#2196F3'; // Blue\n      case POStatus.SHIPPED:\n        return '#673AB7'; // Purple\n      case POStatus.INVOICED:\n        return '#3F51B5'; // Indigo\n      case POStatus.DELIVERED:\n        return '#4CAF50'; // Green\n      case POStatus.CANCELLED:\n        return '#F44336'; // Red\n      default:\n        return '#9E9E9E'; // Grey\n    }\n  };\n  \n  // Format date for display\n  const formatDate = (dateStr: string | undefined) => {\n    if (!dateStr) return 'N/A';\n    try {\n      return format(new Date(dateStr), 'MMM d, yyyy');\n    } catch (e) {\n      return dateStr;\n    }\n  };\n  \n  // Format currency for display\n  const formatCurrency = (amount: number | undefined) => {\n    if (amount === undefined) return 'N/A';\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(amount);\n  };\n\n  // Handle sort change\n  const handleSortChange = (newSort: 'orderDate' | 'amount' | 'dueDate' | 'priority') => {\n    if (localSortBy !== newSort) {\n      setSortBy(newSort);\n    }\n  };\n  \n  // Handle group change\n  const handleGroupChange = (newGroup: 'status' | 'supplier' | 'location' | 'buyer') => {\n    if (localGroupBy !== newGroup) {\n      setGroupBy(newGroup);\n    }\n  };\n  \n  // Handle filter button click\n  const handleFilterClick = () => {\n    Logger.debug('Opening filter modal');\n    setShowFilterModal(true);\n  };\n  \n  // Handle card selection\n  const handleCardClick = (poNumber: string) => {\n    Logger.debug('KanbanBoard.handleCardClick called with poNumber:', poNumber);\n    \n    if (onPOSelect) {\n      onPOSelect(poNumber);\n    }\n  };\n  \n  // Handle drag and drop\n  const handleDragEnd = (result: DropResult) => {\n    const { source, destination } = result;\n    \n    // Dropped outside a droppable area\n    if (!destination) return;\n    \n    // Dropped in the same place\n    if (\n      source.droppableId === destination.droppableId &&\n      source.index === destination.index\n    ) {\n      return;\n    }\n    \n    // Find source and destination columns\n    const sourceColumn = columns.find(col => col.id === source.droppableId);\n    const destColumn = columns.find(col => col.id === destination.droppableId);\n    \n    if (!sourceColumn || !destColumn) return;\n    \n    // Create new columns array\n    const newColumns = [...columns];\n    \n    // Make a copy of the items\n    const sourceItems = [...sourceColumn.items];\n    const destItems = sourceColumn === destColumn ? sourceItems : [...destColumn.items];\n    \n    // Remove the item from the source\n    const [removedItem] = sourceItems.splice(source.index, 1);\n    \n    // Check if this is a status change\n    if (\n      localGroupBy === 'status' && \n      source.droppableId !== destination.droppableId &&\n      onStatusChange\n    ) {\n      // Update the status on the item\n      const newStatus = destination.droppableId as POStatus;\n      removedItem.header.status = newStatus;\n      \n      // Call the onStatusChange callback\n      onStatusChange(removedItem.header.poNumber, newStatus);\n    }\n    \n    // Add the item to the destination\n    destItems.splice(destination.index, 0, removedItem);\n    \n    // Update the columns\n    const sourceColIndex = newColumns.findIndex(col => col.id === source.droppableId);\n    const destColIndex = newColumns.findIndex(col => col.id === destination.droppableId);\n    \n    newColumns[sourceColIndex] = {\n      ...sourceColumn,\n      items: sourceItems\n    };\n    \n    if (sourceColIndex !== destColIndex) {\n      newColumns[destColIndex] = {\n        ...destColumn,\n        items: destItems\n      };\n    }\n    \n    // Update state\n    setColumns(newColumns);\n  };\n  \n  // Loading state\n  if (loading) {\n    return (\n      <div className={`kanban-board ${className}`}>\n        <Card className=\"h-100 shadow-sm\">\n          <Card.Body className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: '500px' }}>\n            <div className=\"text-center\">\n              <Spinner animation=\"border\" variant=\"primary\" />\n              <p className=\"mt-3 text-muted\">Loading kanban board...</p>\n            </div>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n  \n  // Error state\n  if (error) {\n    return (\n      <div className={`kanban-board ${className}`}>\n        <Card className=\"h-100 shadow-sm\">\n          <Card.Body>\n            <Alert variant=\"danger\">\n              <Alert.Heading>Failed to load kanban board</Alert.Heading>\n              <p>{error}</p>\n            </Alert>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n\n  // Filter modal component\n  const filterModal = (\n    <Modal show={showFilterModal} onHide={() => setShowFilterModal(false)} size=\"lg\">\n      <Modal.Header closeButton>\n        <Modal.Title>Filter Purchase Orders</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <Form>\n          <Row className=\"mb-3\">\n            <Col md={6}>\n              <Form.Group controlId=\"filter-keyword\">\n                <Form.Label>Search Keyword</Form.Label>\n                <Form.Control \n                  type=\"text\" \n                  placeholder=\"Enter PO number, supplier, etc.\" \n                  value={filterKeyword}\n                  onChange={(e) => setFilterKeyword(e.target.value)}\n                />\n              </Form.Group>\n            </Col>\n            <Col md={6}>\n              <Form.Group controlId=\"filter-status\">\n                <Form.Label>Status</Form.Label>\n                <Form.Select>\n                  <option value=\"\">All Statuses</option>\n                  <option value={POStatus.UPLOADED}>Uploaded</option>\n                  <option value={POStatus.CONFIRMED}>Confirmed</option>\n                  <option value={POStatus.SHIPPED}>Shipped</option>\n                  <option value={POStatus.INVOICED}>Invoiced</option>\n                  <option value={POStatus.DELIVERED}>Delivered</option>\n                  <option value={POStatus.CANCELLED}>Cancelled</option>\n                </Form.Select>\n              </Form.Group>\n            </Col>\n          </Row>\n\n          <Row className=\"mb-3\">\n            <Col md={6}>\n              <Form.Group controlId=\"filter-date-from\">\n                <Form.Label>From Date</Form.Label>\n                <Form.Control type=\"date\" />\n              </Form.Group>\n            </Col>\n            <Col md={6}>\n              <Form.Group controlId=\"filter-date-to\">\n                <Form.Label>To Date</Form.Label>\n                <Form.Control type=\"date\" />\n              </Form.Group>\n            </Col>\n          </Row>\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={() => setShowFilterModal(false)}>\n          Cancel\n        </Button>\n        <Button variant=\"primary\" onClick={() => {fetchData(); setShowFilterModal(false);}}>\n          Apply Filters\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n  \n  return (\n    <div className={`kanban-board ${className}`}>\n      <Card className=\"h-100 shadow-sm\">\n        <Card.Header className=\"d-flex justify-content-between align-items-center\">\n          <h5 className=\"mb-0\">\n            <i className=\"bi bi-kanban me-2\"></i>\n            Kanban Board\n          </h5>\n          \n          <div className=\"d-flex gap-2\">\n            <Dropdown>\n              <Dropdown.Toggle variant=\"outline-secondary\" size=\"sm\">\n                <i className=\"bi bi-sort-down me-1\"></i> Sort: {localSortBy === 'orderDate' ? 'Order Date' : \n                                                                 localSortBy === 'amount' ? 'Amount' : \n                                                                 localSortBy === 'dueDate' ? 'Due Date' : 'Priority'}\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item active={localSortBy === 'orderDate'} onClick={() => handleSortChange('orderDate')}>\n                  Order Date</Dropdown.Item>\n                <Dropdown.Item active={localSortBy === 'amount'} onClick={() => handleSortChange('amount')}>\n                  Amount</Dropdown.Item>\n                <Dropdown.Item active={localSortBy === 'dueDate'} onClick={() => handleSortChange('dueDate')}>\n                  Due Date</Dropdown.Item>\n                <Dropdown.Item active={localSortBy === 'priority'} onClick={() => handleSortChange('priority')}>Priority</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n            \n            <Button variant=\"outline-primary\" size=\"sm\" onClick={handleFilterClick}>\n              <i className=\"bi bi-filter me-1\"></i> Filter\n            </Button>\n          </div>\n\n          <div className=\"ms-auto\">\n            <Dropdown>\n              <Dropdown.Toggle variant=\"outline-secondary\" size=\"sm\">\n                <i className=\"bi bi-layout-three-columns me-1\"></i> Group By: {localGroupBy === 'status' ? 'Status' : \n                                                                 localGroupBy === 'supplier' ? 'Supplier' : \n                                                                 localGroupBy === 'location' ? 'Location' : 'Buyer'}\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item active={localGroupBy === 'status'} onClick={() => handleGroupChange('status')}>Status</Dropdown.Item>\n                <Dropdown.Item active={localGroupBy === 'supplier'} onClick={() => handleGroupChange('supplier')}>Supplier</Dropdown.Item>\n                <Dropdown.Item active={localGroupBy === 'location'} onClick={() => handleGroupChange('location')}>Location</Dropdown.Item>\n                <Dropdown.Item active={localGroupBy === 'buyer'} onClick={() => handleGroupChange('buyer')}>Buyer</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </div>\n        </Card.Header>\n        \n        <Card.Body className=\"p-0\">\n          <div className=\"kanban-container p-2\">\n            <DragDropContext onDragEnd={handleDragEnd}>\n              <div className=\"d-flex kanban-columns-container overflow-auto px-2 py-3\" style={{ minHeight: '500px' }}>\n                {columns.map((column) => (\n                  <div className=\"kanban-column mx-2\" key={column.id} style={{ minWidth: '300px' }}>\n                    <div \n                      className=\"kanban-column-header p-2 rounded-top\" \n                      style={{ \n                        backgroundColor: column.color || '#f8f9fa',\n                        color: column.color ? '#fff' : '#212529'\n                      }}\n                    >\n                      <div className=\"d-flex justify-content-between align-items-center\">\n                        <h6 className=\"mb-0\">{column.title}</h6>\n                        <Badge bg=\"light\" text=\"dark\">{column.items.length}</Badge>\n                      </div>\n                    </div>\n                    \n                    <Droppable droppableId={column.id}>\n                      {(provided) => (\n                        <div\n                          className=\"kanban-column-content p-2 bg-light rounded-bottom\"\n                          {...provided.droppableProps}\n                          ref={provided.innerRef}\n                          style={{ minHeight: '200px' }}\n                        >\n                          {column.items.map((po, index) => (\n                            <Draggable key={po.header.poNumber} draggableId={po.header.poNumber} index={index}>\n                              {(provided) => (\n                                <div\n                                  ref={provided.innerRef}\n                                  {...provided.draggableProps}\n                                  {...provided.dragHandleProps}\n                                  className=\"kanban-card mb-2 p-3 bg-white rounded shadow-sm\"\n                                  onClick={() => handleCardClick(po.header.poNumber)}\n                                >\n                                  <div className=\"d-flex justify-content-between align-items-start mb-2\">\n                                    <h6 className=\"mb-0\">{po.header.poNumber}</h6>\n                                    <Badge \n                                      bg={getStatusColor(po.header.status).replace('#', '')} \n                                      style={{ backgroundColor: getStatusColor(po.header.status) }}\n                                    >\n                                      {po.header.status}\n                                    </Badge>\n                                  </div>\n                                  \n                                  <div className=\"small mb-2 fw-bold\">\n                                    {po.header.syscoLocation.name}\n                                  </div>\n                                  \n                                  <div className=\"d-flex justify-content-between text-muted small\">\n                                    <div>\n                                      <i className=\"bi bi-calendar3 me-1\"></i>\n                                      {formatDate(po.header.orderDate)}\n                                    </div>\n                                    <div>\n                                      <i className=\"bi bi-cash me-1\"></i>\n                                      {formatCurrency(po.totalCost)}\n                                    </div>\n                                  </div>\n                                </div>\n                              )}\n                            </Draggable>\n                          ))}\n                          {provided.placeholder}\n                        </div>\n                      )}\n                    </Droppable>\n                  </div>\n                ))}\n              </div>\n            </DragDropContext>\n          </div>\n        </Card.Body>\n\n        {/* Render the filter modal */}\n        {filterModal}\n      </Card>\n    </div>\n  );\n};\n\nexport default KanbanBoard;"],"names":["KanbanBoard","groupBy","sortBy","filterStatus","onPOSelect","onStatusChange","onComponentRender","className","renderStartTime","useRef","performance","now","columns","setColumns","useState","loading","setLoading","localGroupBy","setGroupBy","localSortBy","setSortBy","error","setError","showFilterModal","setShowFilterModal","filterKeyword","setFilterKeyword","POStatus","CONFIRMED","SHIPPED","DELIVERED","UPLOADED","INVOICED","CANCELLED","useEffect","start","current","fetchData","Logger","debug","async","Date","thirtyDaysAgo","setDate","getDate","response","ApiService","fetchPOs","startDate","toISOString","endDate","limit","data","length","info","groupedColumns","createGroupedColumns","renderTime","err","Error","message","String","purchaseOrders","grouping","sorting","groups","columnData","filteredPOs","filter","po","includes","header","status","statusOrder","forEach","push","map","id","title","items","sortPurchaseOrders","color","getStatusColor","key","syscoLocation","name","Object","keys","buyerInfo","firstName","lastName","sortCriteria","sort","a","b","orderDate","getTime","totalCost","_a","deliveryInfo","date","Number","MAX_SAFE_INTEGER","_b","priorityMap","formatDate","dateStr","format","e","handleSortChange","newSort","handleGroupChange","newGroup","jsxRuntimeExports","jsx","children","Card","Body","style","minHeight","jsxs","Spinner","animation","variant","Alert","Heading","filterModal","Modal","show","onHide","size","Header","closeButton","Title","Form","Row","Col","md","Group","controlId","Label","Control","type","placeholder","value","onChange","target","Select","Footer","Button","onClick","Dropdown","Toggle","Menu","Item","active","DragDropContext","onDragEnd","result","source","destination","droppableId","index","sourceColumn","find","col","destColumn","newColumns","sourceItems","destItems","removedItem","splice","newStatus","poNumber","sourceColIndex","findIndex","destColIndex","column","minWidth","backgroundColor","Badge","bg","text","Droppable","provided","droppableProps","ref","innerRef","Draggable","draggableId","draggableProps","dragHandleProps","handleCardClick","replace","amount","Intl","NumberFormat","currency"],"mappings":"gOAkCA,MAAMA,EAA0C,EAC9CC,UAAU,SACVC,SAAS,YACTC,eAAe,MACfC,aACAC,iBACAC,oBACAC,YAAY,OAGZ,MAAMC,EAAkBC,EAAAA,OAAeC,YAAYC,QAG5CC,EAASC,GAAcC,EAAAA,SAAyB,KAGhDC,EAASC,GAAcF,EAAAA,UAAkB,IACzCG,EAAcC,GAAcJ,EAAAA,SAAuDb,IACnFkB,EAAaC,GAAaN,EAAAA,SAA0DZ,IACpFmB,EAAOC,GAAYR,EAAAA,SAAwB,OAG3CS,EAAiBC,GAAsBV,EAAAA,UAAkB,IACzDW,EAAeC,GAAoBZ,EAAAA,SAAiB,IAO7Ca,EAASC,UAwBTD,EAASE,QAwBTF,EAASG,UAuBTH,EAASI,SAuBTJ,EAASK,SAuBTL,EAASM,UAuBvBC,EAAAA,WAAU,KACF,MAAAC,EAAQzB,YAAYC,MAK1B,OAJAH,EAAgB4B,QAAUD,EAEhBE,IAEH,KACLC,EAAOC,MAAM,oCAAoC7B,YAAYC,MAAQwB,MAAS,CAChF,GACC,CAAClB,EAAcE,IAGlB,MAAMkB,EAAYG,UAChBxB,GAAW,GAEP,IAEI,MAAAL,MAAU8B,KACVC,EAAgB,IAAID,KAAK9B,GAC/B+B,EAAcC,QAAQD,EAAcE,UAAY,IAG1C,MAAAC,QAAiBC,EAAWC,SAAS,CACzCC,UAAWN,EAAcO,cACzBC,QAASvC,EAAIsC,cACbE,MAAO,MAGT,GAAIN,GAAYA,EAASO,MAAQP,EAASO,KAAKC,OAAS,EAAG,CACzDf,EAAOgB,KAAK,SAAST,EAASO,KAAKC,+BAGnC,MAAME,EAAiBC,EAAqBX,EAASO,KAAMnC,EAAcE,GAKzE,GAJAN,EAAW0C,GACXvC,GAAW,GAGPV,EAAmB,CACrB,MAAMmD,EAAa/C,YAAYC,MAAQH,EAAgB4B,QACvD9B,EAAkBmD,EAAU,CAC9B,MAEAnB,EAAOgB,KAAK,uBAeVzC,EAAW,IACXS,EAAS,yDAGXN,GAAW,SAEN0C,GACApB,EAAAjB,MAAM,kCAAmCqC,GACvCpC,EAAA,qCAAqCoC,aAAeC,MAAQD,EAAIE,QAAUC,OAAOH,MAcxF7C,EAAW,IACXS,EAAS,qDAEXN,GAAW,EAAK,GAKdwC,EAAuB,CAC3BM,EACAC,EACAC,KAEA,IAAIC,EAA0C,CAAC,EAC3CC,EAA6B,GAG7BC,EAAcL,EAalB,GAZqB,QAAjB3D,IACYgE,EAAAL,EAAeM,QAAaC,GACnB,SAAjBlE,EACK,CAACwB,EAASI,SAAUJ,EAASC,WAAW0C,SAASD,EAAGE,OAAOC,QACxC,cAAjBrE,GACF,CAACwB,EAASG,UAAWH,EAASK,UAAUsC,SAASD,EAAGE,OAAOC,WAOvD,WAAbT,EAAuB,CAEzB,MAAMU,EAAc,CAClB9C,EAASI,SACTJ,EAASC,UACTD,EAASE,QACTF,EAASK,SACTL,EAASG,UACTH,EAASM,WAICwC,EAAAC,SAAkBF,IACrBP,EAAAO,GAAU,EAAC,IAIRL,EAAAO,SAAcL,IAClB,MAAAG,EAASH,EAAGE,OAAOC,OACpBP,EAAOO,KACHP,EAAAO,GAAU,IAEZP,EAAAO,GAAQG,KAAKN,EAAE,IAIXH,EAAAO,EAAYG,KAAcJ,IAC9B,CACLK,GAAIL,EACJM,MAAON,EACPO,MAAOC,EAAmBf,EAAOO,IAAW,GAAIR,GAChDiB,MAAOC,EAAeV,MAGjB,KAAa,aAAbT,GAAwC,aAAbA,GAExBI,EAAAO,SAAcL,IAClB,MAAAc,EACFd,EAAGE,OAAOa,cAAcC,KAGvBpB,EAAOkB,KACHlB,EAAAkB,GAAO,IAETlB,EAAAkB,GAAKR,KAAKN,EAAE,IAIrBH,EAAaoB,OAAOC,KAAKtB,GAAQW,KAAYO,IAAA,CAC3CN,GAAIM,EACJL,MAAOK,EACPJ,MAAOC,EAAmBf,EAAOkB,GAAMnB,QAEnB,UAAbD,IAEGI,EAAAO,SAAcL,IAClB,MAAAc,EAAM,GAAGd,EAAGE,OAAOiB,UAAUC,aAAapB,EAAGE,OAAOiB,UAAUE,WAC/DzB,EAAOkB,KACHlB,EAAAkB,GAAO,IAETlB,EAAAkB,GAAKR,KAAKN,EAAE,IAIrBH,EAAaoB,OAAOC,KAAKtB,GAAQW,KAAYO,IAAA,CAC3CN,GAAIM,EACJL,MAAOK,EACPJ,MAAOC,EAAmBf,EAAOkB,GAAMnB,QAIpC,OAAAE,CAAA,EAIHc,EAAqB,CAAClB,EAAiC6B,IACpD,IAAI7B,GAAgB8B,MAAK,CAACC,EAAGC,aAClC,OAAQH,GACN,IAAK,YACH,OAAO,IAAIlD,KAAKoD,EAAEtB,OAAOwB,WAAWC,UAAY,IAAIvD,KAAKqD,EAAEvB,OAAOwB,WAAWC,UAE/E,IAAK,SACH,OAAQF,EAAEG,WAAa,IAAMJ,EAAEI,WAAa,GAE9C,IAAK,UASH,QARiB,OAAAC,EAAAL,EAAEtB,OAAO4B,uBAAcC,MACpC,IAAI3D,KAAKoD,EAAEtB,OAAO4B,aAAaC,MAAMJ,UACrCK,OAAOC,oBAEM,OAAAC,EAAAT,EAAEvB,OAAO4B,uBAAcC,MACpC,IAAI3D,KAAKqD,EAAEvB,OAAO4B,aAAaC,MAAMJ,UACrCK,OAAOC,kBAKb,IAAK,WAEH,MAAME,EAAwC,CAC5C,CAAC7E,EAASI,UAAW,EACrB,CAACJ,EAASC,WAAY,EACtB,CAACD,EAASE,SAAU,EACpB,CAACF,EAASK,UAAW,EACrB,CAACL,EAASG,WAAY,EACtB,CAACH,EAASM,WAAY,GAGjB,OAAAuE,EAAYX,EAAEtB,OAAOC,QAAUgC,EAAYV,EAAEvB,OAAOC,QAE7D,QACS,OAAA,EAAA,IAMTU,EAAkBV,IACtB,OAAQA,GACN,KAAK7C,EAASI,SACL,MAAA,UACT,KAAKJ,EAASC,UACL,MAAA,UACT,KAAKD,EAASE,QACL,MAAA,UACT,KAAKF,EAASK,SACL,MAAA,UACT,KAAKL,EAASG,UACL,MAAA,UACT,KAAKH,EAASM,UACL,MAAA,UACT,QACS,MAAA,UAAA,EAKPwE,EAAcC,IACd,IAACA,EAAgB,MAAA,MACjB,IACF,OAAOC,EAAO,IAAIlE,KAAKiE,GAAU,qBAC1BE,GACA,OAAAF,CAAA,GAcLG,EAAoBC,IACpB3F,IAAgB2F,GAClB1F,EAAU0F,EAAO,EAKfC,EAAqBC,IACrB/F,IAAiB+F,GACnB9F,EAAW8F,EAAQ,EAwFvB,GAAIjG,EAEA,OAACkG,EAAAC,IAAA,MAAI,CAAA3G,UAAW,gBAAgBA,IAC9B4G,WAACD,IAAAE,EAAA,CAAK7G,UAAU,kBACd4G,SAACD,EAAAA,IAAAE,EAAKC,KAAL,CAAU9G,UAAU,mDAAmD+G,MAAO,CAAEC,UAAW,SAC1FJ,WAACK,KAAA,MAAI,CAAAjH,UAAU,cACb4G,SAAA,OAACM,EAAQ,CAAAC,UAAU,SAASC,QAAQ,kBACnC,IAAA,CAAEpH,UAAU,kBAAkB4G,SAAuB,qCASlE,GAAI9F,eAEC,MAAI,CAAAd,UAAW,gBAAgBA,IAC9B4G,SAACD,EAAAA,IAAAE,EAAA,CAAK7G,UAAU,kBACd4G,eAACC,EAAKC,KAAL,CACCF,gBAACS,EAAA,CAAMD,QAAQ,SACbR,SAAA,OAACS,EAAMC,QAAN,CAAcV,SAA2B,kCACzCD,IAAA,KAAGC,SAAM9F,aAShB,MAAAyG,EACHN,EAAAA,KAAAO,EAAA,CAAMC,KAAMzG,EAAiB0G,OAAQ,IAAMzG,GAAmB,GAAQ0G,KAAK,KAC1Ef,SAAA,GAACD,IAAAa,EAAMI,OAAN,CAAaC,aAAW,EACvBjB,eAACY,EAAMM,MAAN,CAAYlB,SAAA,6BAEdD,EAAAA,IAAAa,EAAMV,KAAN,CACCF,gBAACmB,EACC,CAAAnB,SAAA,GAACK,KAAAe,EAAA,CAAIhI,UAAU,OACb4G,SAAA,CAACD,EAAAA,IAAAsB,EAAA,CAAIC,GAAI,EACPtB,gBAACmB,EAAKI,MAAL,CAAWC,UAAU,iBACpBxB,SAAA,OAACmB,EAAKM,MAAL,CAAWzB,SAAc,mBAC1BF,EAAAC,IAACoB,EAAKO,QAAL,CACCC,KAAK,OACLC,YAAY,kCACZC,MAAOvH,EACPwH,SAAWrC,GAAMlF,EAAiBkF,EAAEsC,OAAOF,cAIhD9B,EAAAA,IAAAsB,GAAIC,GAAI,EACPtB,gBAACmB,EAAKI,MAAL,CAAWC,UAAU,gBACpBxB,SAAA,OAACmB,EAAKM,MAAL,CAAWzB,SAAM,WACjBK,EAAAA,KAAAc,EAAKa,OAAL,CACChC,SAAA,OAAC,SAAA,CAAO6B,MAAM,GAAG7B,SAAY,iBAC5BD,EAAAA,IAAA,SAAA,CAAO8B,MAAOrH,EAASI,SAAUoF,SAAQ,aACzCD,EAAAA,IAAA,SAAA,CAAO8B,MAAOrH,EAASC,UAAWuF,SAAS,cAC3CD,EAAAA,IAAA,SAAA,CAAO8B,MAAOrH,EAASE,QAASsF,SAAO,YACvCD,EAAAA,IAAA,SAAA,CAAO8B,MAAOrH,EAASK,SAAUmF,SAAQ,aACzCD,EAAAA,IAAA,SAAA,CAAO8B,MAAOrH,EAASG,UAAWqF,SAAS,cAC3CD,EAAAA,IAAA,SAAA,CAAO8B,MAAOrH,EAASM,UAAWkF,SAAS,2BAMnDK,KAAAe,EAAI,CAAAhI,UAAU,OACb4G,SAAA,CAACD,EAAAA,IAAAsB,EAAA,CAAIC,GAAI,EACPtB,gBAACmB,EAAKI,MAAL,CAAWC,UAAU,mBACpBxB,SAAA,OAACmB,EAAKM,MAAL,CAAWzB,SAAS,oBACpBmB,EAAKO,QAAL,CAAaC,KAAK,cAGtB5B,EAAAA,IAAAsB,GAAIC,GAAI,EACPtB,gBAACmB,EAAKI,MAAL,CAAWC,UAAU,iBACpBxB,SAAA,OAACmB,EAAKM,MAAL,CAAWzB,SAAO,kBAClBmB,EAAKO,QAAL,CAAaC,KAAK,sBAM5BtB,EAAAA,KAAAO,EAAMqB,OAAN,CACCjC,SAAA,CAACD,EAAAA,IAAAmC,EAAA,CAAO1B,QAAQ,YAAY2B,QAAS,IAAM9H,GAAmB,GAAQ2F,SAEtE,iBACCkC,EAAA,CAAO1B,QAAQ,UAAU2B,QAAS,KAAiBjH,IAAGb,GAAmB,EAAK,EAAK2F,SAEpF,wBAMJ,OAACF,EAAAC,IAAA,OAAI3G,UAAW,gBAAgBA,IAC9B4G,WAACK,KAAAJ,EAAK,CAAA7G,UAAU,kBACd4G,SAAA,QAACC,EAAKe,OAAL,CAAY5H,UAAU,oDACrB4G,SAAA,GAACK,KAAA,KAAA,CAAGjH,UAAU,OACZ4G,SAAA,GAACD,IAAA,IAAA,CAAE3G,UAAU,sBAAwB,oBAItCiH,KAAA,MAAI,CAAAjH,UAAU,eACb4G,SAAA,QAACoC,EACC,CAAApC,SAAA,CAAAK,OAAC+B,EAASC,OAAT,CAAgB7B,QAAQ,oBAAoBO,KAAK,KAChDf,SAAA,GAACD,IAAA,IAAA,CAAE3G,UAAU,yBAA2B,UAAwB,cAAhBY,EAA8B,aACb,WAAhBA,EAA2B,SACX,YAAhBA,EAA4B,WAAa,cAE3FqG,EAAAA,KAAA+B,EAASE,KAAT,CACCtC,SAAA,CAACD,EAAAA,IAAAqC,EAASG,KAAT,CAAcC,OAAwB,cAAhBxI,EAA6BmI,QAAS,IAAMzC,EAAiB,aAAcM,SACtF,eACXD,EAAAA,IAAAqC,EAASG,KAAT,CAAcC,OAAwB,WAAhBxI,EAA0BmI,QAAS,IAAMzC,EAAiB,UAAWM,SACpF,WACPD,EAAAA,IAAAqC,EAASG,KAAT,CAAcC,OAAwB,YAAhBxI,EAA2BmI,QAAS,IAAMzC,EAAiB,WAAYM,SACpF,aACTD,EAAAA,IAAAqC,EAASG,KAAT,CAAcC,OAAwB,aAAhBxI,EAA4BmI,QAAS,IAAMzC,EAAiB,YAAaM,SAAQ,0BAI3GkC,EAAO,CAAA1B,QAAQ,kBAAkBO,KAAK,KAAKoB,QA5M5B,KACxBhH,EAAOC,MAAM,wBACbf,GAAmB,EAAI,EA2Mb2F,SAAA,GAACD,IAAA,IAAA,CAAE3G,UAAU,sBAAwB,gBAIxC2G,MAAA,MAAA,CAAI3G,UAAU,UACb4G,gBAACoC,EACC,CAAApC,SAAA,CAAAK,OAAC+B,EAASC,OAAT,CAAgB7B,QAAQ,oBAAoBO,KAAK,KAChDf,SAAA,GAACD,IAAA,IAAA,CAAE3G,UAAU,oCAAsC,cAA6B,WAAjBU,EAA4B,SACzB,aAAjBA,EAA8B,WACb,aAAjBA,EAA8B,WAAa,WAE7FuG,EAAAA,KAAA+B,EAASE,KAAT,CACCtC,SAAA,CAACD,EAAAA,IAAAqC,EAASG,KAAT,CAAcC,OAAyB,WAAjB1I,EAA2BqI,QAAS,IAAMvC,EAAkB,UAAWI,SAAM,WACnGD,EAAAA,IAAAqC,EAASG,KAAT,CAAcC,OAAyB,aAAjB1I,EAA6BqI,QAAS,IAAMvC,EAAkB,YAAaI,SAAQ,aACzGD,EAAAA,IAAAqC,EAASG,KAAT,CAAcC,OAAyB,aAAjB1I,EAA6BqI,QAAS,IAAMvC,EAAkB,YAAaI,SAAQ,aACzGD,EAAAA,IAAAqC,EAASG,KAAT,CAAcC,OAAyB,UAAjB1I,EAA0BqI,QAAS,IAAMvC,EAAkB,SAAUI,SAAK,qBAMxGD,MAAAE,EAAKC,KAAL,CAAU9G,UAAU,MACnB4G,eAAC,MAAI,CAAA5G,UAAU,uBACb4G,eAACyC,EAAA,CAAgBC,UArNJC,IACf,MAAAC,OAAEA,EAAQC,YAAAA,GAAgBF,EAGhC,IAAKE,EAAa,OAGlB,GACED,EAAOE,cAAgBD,EAAYC,aACnCF,EAAOG,QAAUF,EAAYE,MAE7B,OAII,MAAAC,EAAevJ,EAAQwJ,SAAYC,EAAIxF,KAAOkF,EAAOE,cACrDK,EAAa1J,EAAQwJ,SAAYC,EAAIxF,KAAOmF,EAAYC,cAE1D,IAACE,IAAiBG,EAAY,OAG5B,MAAAC,EAAa,IAAI3J,GAGjB4J,EAAc,IAAIL,EAAapF,OAC/B0F,EAAYN,IAAiBG,EAAaE,EAAc,IAAIF,EAAWvF,QAGtE2F,GAAeF,EAAYG,OAAOZ,EAAOG,MAAO,GAGvD,GACmB,WAAjBjJ,GACA8I,EAAOE,cAAgBD,EAAYC,aACnC5J,EACA,CAEA,MAAMuK,EAAYZ,EAAYC,YAC9BS,EAAYnG,OAAOC,OAASoG,EAGbvK,EAAAqK,EAAYnG,OAAOsG,SAAUD,EAAS,CAIvDH,EAAUE,OAAOX,EAAYE,MAAO,EAAGQ,GAGjC,MAAAI,EAAiBP,EAAWQ,cAAiBV,EAAIxF,KAAOkF,EAAOE,cAC/De,EAAeT,EAAWQ,cAAiBV,EAAIxF,KAAOmF,EAAYC,cAExEM,EAAWO,GAAkB,IACxBX,EACHpF,MAAOyF,GAGLM,IAAmBE,IACrBT,EAAWS,GAAgB,IACtBV,EACHvF,MAAO0F,IAKX5J,EAAW0J,EAAU,EAsJXpD,eAAC,MAAI,CAAA5G,UAAU,0DAA0D+G,MAAO,CAAEC,UAAW,SAC1FJ,SAAAvG,EAAQgE,KAAKqG,UACX,MAAA,CAAI1K,UAAU,qBAAqC+G,MAAO,CAAE4D,SAAU,SACrE/D,SAAA,CAAAF,EAAAC,IAAC,MAAA,CACC3G,UAAU,uCACV+G,MAAO,CACL6D,gBAAiBF,EAAOhG,OAAS,UACjCA,MAAOgG,EAAOhG,MAAQ,OAAS,WAGjCkC,SAACF,EAAAO,KAAA,MAAI,CAAAjH,UAAU,oDACb4G,SAAA,CAAAD,EAAAA,IAAC,KAAG,CAAA3G,UAAU,OAAQ4G,SAAA8D,EAAOnG,QAC7BoC,EAAAA,IAACkE,GAAMC,GAAG,QAAQC,KAAK,OAAQnE,SAAA8D,EAAOlG,MAAM1B,oBAI/CkI,EAAU,CAAAtB,YAAagB,EAAOpG,GAC5BsC,SAACqE,GACAvE,EAAAO,KAAC,MAAA,CACCjH,UAAU,uDACNiL,EAASC,eACbC,IAAKF,EAASG,SACdrE,MAAO,CAAEC,UAAW,SAEnBJ,SAAA,CAAA8D,EAAOlG,MAAMH,KAAI,CAACP,EAAI6F,MACpBhD,IAAA0E,EAAmC,CAAAC,YAAaxH,EAAGE,OAAOsG,SAAUX,QAClE/C,SAACqE,IACAvE,SAAAO,KAAC,MAAA,CACCkE,IAAKF,EAASG,YACVH,EAASM,kBACTN,EAASO,gBACbxL,UAAU,kDACV+I,QAAS,KAAM0C,OA/PtBnB,EA+PsCxG,EAAGE,OAAOsG,SA9PhEvI,EAAAC,MAAM,oDAAqDsI,QAE9DzK,GACFA,EAAWyK,IAJS,IAACA,CA+PwD,EAEjD1D,SAAA,GAACK,KAAA,MAAA,CAAIjH,UAAU,wDACb4G,SAAA,CAAAD,MAAC,KAAG,CAAA3G,UAAU,OAAQ4G,SAAA9C,EAAGE,OAAOsG,WAChC5D,EAAAC,IAACkE,EAAA,CACCC,GAAInG,EAAeb,EAAGE,OAAOC,QAAQyH,QAAQ,IAAK,IAClD3E,MAAO,CAAE6D,gBAAiBjG,EAAeb,EAAGE,OAAOC,SAElD2C,WAAG5C,OAAOC,kBAId,MAAI,CAAAjE,UAAU,qBACZ4G,SAAG9C,EAAAE,OAAOa,cAAcC,SAG1BmC,KAAA,MAAI,CAAAjH,UAAU,kDACb4G,SAAA,QAAC,MACC,CAAAA,SAAA,GAACD,IAAA,IAAA,CAAE3G,UAAU,yBACZkG,EAAWpC,EAAGE,OAAOwB,qBAEvB,MACC,CAAAoB,SAAA,GAACD,IAAA,IAAA,CAAE3G,UAAU,qBAlTzB2L,EAmT4B7H,EAAG4B,eAlTtC,IAAXiG,EAA6B,MAC1B,IAAIC,KAAKC,aAAa,QAAS,CACpC9E,MAAO,WACP+E,SAAU,QACT1F,OAAOuF,aALW,IAACA,CAqRkB,GAAA7H,EAAGE,OAAOsG,YAqC3BW,EAASzC,mBA5DuBkC,EAAOpG,cAwEzDiD,MAEL"}