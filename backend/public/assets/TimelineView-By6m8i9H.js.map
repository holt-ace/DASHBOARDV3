{"version":3,"mappings":"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","names":["TimelineView","timeRange","groupBy","onTimeRangeChange","milestoneType","onPOSelect","onComponentRender","className","renderStartTime","useRef","useEffect","DebugHelper","componentDidMount","componentWillUnmount","timelineRef","rows","setRows","useState","visibleRange","setVisibleRange","start","Date","end","addDays","localTimeRange","setTimeRange","localGroupBy","setGroupBy","zoomLevel","setZoomLevel","loading","setLoading","error","setError","current","performance","now","Logger","debug","fetchPurchaseOrders","err","async","dataFetch","startDate","setMonth","getMonth","setFullYear","getFullYear","toISOString","endDate","response","ApiService","fetchPOs","limit","data","length","info","enrichedPOs","enrichPurchaseOrders","timelineData","createTimelineData","renderTime","visualizationRendered","rowCount","poCount","dataError","String","renderError","__vitePreload","import","__VITE_PRELOAD__","then","module","mockData","mockPurchaseOrders","catch","apiError","Error","message","useCallback","purchaseOrders","map","po","history","generateHistoryFromStatus","header","orderDate","warn","_a","poNumber","push","status","POStatus","UPLOADED","timestamp","user","buyerInfo","firstName","lastName","CONFIRMED","SHIPPED","DELIVERED","INVOICED","CANCELLED","_b","groupingMethod","eventType","startTime","allEvents","sortedHistory","sort","a","b","getTime","firstEvent","lastEvent","id","label","forEach","historyEntry","index","details","notes","deliveryInfo","date","_c","invoice","dueDate","poError","_d","rows2","Set","event","events","filter","isExpanded","Object","values","mainPOEvent","find","e","row","group","includes","substring","groupingError","filteredRows","endTime","executionTime","toFixed","eventCount","processingError","calculateTimelinePosition","rangeStart","rangeEnd","totalDays","differenceInDays","leftPercent","Math","max","durationDays","left","width","formatDate","format","handleZoom","direction","prev","newZoom","min","handleTimeRangeChange","newRange","handleGroupingChange","newGrouping","getMilestoneColor","handleEventClick","generateDayMarkers","markers","step","i","position","jsxRuntimeExports","jsx","style","children","toggleRowExpansion","rowId","prevRows","CardHeader","useMemo","jsxs","Card","Header","role","Button","variant","title","size","onClick","disabled","Dropdown","Toggle","Menu","Item","active","TimelineRows","minWidth","transform","transformOrigin","height","OverlayTrigger","placement","overlay","Tooltip","top","backgroundColor","cursor","Fragment","borderRadius","border","TimelineLegend","Body","minHeight","Spinner","animation","Alert","Heading","ref","overflowX","overflowY","maxHeight"],"ignoreList":[],"sources":["../../src/components/visualizations/TimelineView.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';\nimport { Card, Alert, Spinner, Button, Dropdown, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { format, addDays, differenceInDays } from 'date-fns';\nimport { ApiService } from '@/services/ApiService';\nimport { PurchaseOrder, POStatus } from '@/types/purchaseOrder';\nimport Logger from '@/utils/logger';\nimport DebugHelper from '@/utils/debugHelper';\n\n// Props for the TimelineView component\ninterface TimelineViewProps {\n  timeRange?: 'month' | 'quarter' | '6months' | 'year' | 'custom';\n  groupBy?: 'none' | 'supplier' | 'status' | 'location';\n  onTimeRangeChange?: (timeRange: 'month' | 'quarter' | '6months' | 'year' | 'custom') => void;\n  milestoneType?: 'all' | 'status' | 'delivery' | 'payment';\n  onPOSelect?: (poNumber: string) => void;\n  onComponentRender?: (renderTime: number) => void;\n  className?: string;\n}\n\n// Interface for timeline events\ninterface TimelineEvent {\n  id: string;\n  poNumber: string;\n  label: string;\n  startDate: Date;\n  endDate: Date | null;\n  status: POStatus;\n  milestoneType: 'status' | 'delivery' | 'payment';\n  details?: string;\n}\n\n// Interface for timeline rows\ninterface TimelineRow {\n  id: string;\n  label: string;\n  events: TimelineEvent[];\n  isExpanded?: boolean;\n}\n\n/**\n * TimelineView Component\n * \n * Displays purchase orders on a Gantt-style timeline with status milestones.\n * Purchase orders are shown as bars spanning their lifecycle with markers for status changes.\n * Supports zooming, filtering, and grouping options.\n */\nconst TimelineView: React.FC<TimelineViewProps> = ({\n  timeRange = 'month',\n  groupBy = 'none',\n  onTimeRangeChange,\n  milestoneType = 'all',\n  onPOSelect,\n  onComponentRender,\n  className = ''\n}) => {\n  // Performance metrics\n  const renderStartTime = useRef<number>(0);\n  \n  // Log component mount for debugging\n  useEffect(() => {\n    DebugHelper.componentDidMount('TimelineView', { \n      timeRange, groupBy, milestoneType \n    });\n    \n    return () => {\n      DebugHelper.componentWillUnmount('TimelineView');\n    };\n  }, [timeRange, groupBy, milestoneType]);\n\n  // Ref for the timeline container\n  const timelineRef = useRef<HTMLDivElement>(null);\n  \n  // State for timeline data\n  const [rows, setRows] = useState<TimelineRow[]>([]);\n  const [visibleRange, setVisibleRange] = useState({\n    start: new Date(),\n    end: addDays(new Date(), 30)\n  });\n  \n  // Display settings\n  const [localTimeRange, setTimeRange] = useState<'month' | 'quarter' | '6months' | 'year' | 'custom'>(timeRange);\n  const [localGroupBy, setGroupBy] = useState<'none' | 'supplier' | 'status' | 'location'>(groupBy);\n  const [zoomLevel, setZoomLevel] = useState<number>(1); // 1 = default, 2 = 2x zoom, etc.\n  \n  // Loading and error states\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Initialize timeline data when component mounts or settings change\n  useEffect(() => {\n    try {\n      // Start performance measurement\n      renderStartTime.current = performance.now();\n      Logger.debug('[TIMELINE] Settings changed, fetching new data', {\n        timeRange: localTimeRange,\n        groupBy: localGroupBy,\n        milestoneType\n      });\n      \n      fetchPurchaseOrders();\n    } catch (err) {\n      Logger.error('[TIMELINE] Error in settings change effect:', err);\n    }\n  }, [localTimeRange, localGroupBy, milestoneType]);\n\n  // Fetch purchase orders from API\n  const fetchPurchaseOrders = async () => {\n    Logger.debug('[TIMELINE] Starting data fetch');\n    DebugHelper.dataFetch('TimelineView', 'PurchaseOrders', 'start', {\n      timeRange: localTimeRange,\n      groupBy: localGroupBy\n    });\n    \n    setLoading(true);\n    \n    // Set visible date range based on timeRange\n    const now = new Date();\n    let startDate = new Date();\n    \n    try {\n      switch (localTimeRange) {\n        case 'month':\n          startDate.setMonth(startDate.getMonth() - 1);\n          break;\n        case 'quarter':\n          startDate.setMonth(startDate.getMonth() - 3);\n          break;\n        case '6months':\n          startDate.setMonth(startDate.getMonth() - 6);\n          break;\n        case 'year':\n          startDate.setFullYear(startDate.getFullYear() - 1);\n          break;\n        case 'custom':\n          // Custom range would be set elsewhere\n          startDate.setMonth(startDate.getMonth() - 1);\n          break;\n      }\n      \n      // Update visible range\n      setVisibleRange({ start: startDate, end: now });\n      \n      try {\n        // Fetch POs from API within date range\n        Logger.debug('[TIMELINE] Calling API to fetch POs', {\n          startDate: startDate.toISOString(),\n          endDate: now.toISOString()\n        });\n        \n        const response = await ApiService.fetchPOs({\n          startDate: startDate.toISOString(),\n          endDate: now.toISOString(),\n          limit: 100\n        });\n        \n        if (response && response.data && response.data.length > 0) {\n          Logger.info(`[TIMELINE] Found ${response.data.length} POs for timeline`);\n          \n          // Add missing history data if needed\n          const enrichedPOs = enrichPurchaseOrders(response.data);\n          \n          // Transform purchase orders into timeline data\n          try {\n            const timelineData = createTimelineData(enrichedPOs, localGroupBy, milestoneType);\n            setRows(timelineData);\n            \n            // Report rendering performance if callback provided\n            const renderTime = performance.now() - renderStartTime.current;\n            if (onComponentRender) {\n              onComponentRender(renderTime);\n            }\n            DebugHelper.visualizationRendered('TimelineView', timelineData.length, performance.now() - renderStartTime.current);\n            DebugHelper.dataFetch('TimelineView', 'PurchaseOrders', 'success', {\n              rowCount: timelineData.length,\n              poCount: response.data.length\n            });\n            \n            setError(null);\n          } catch (dataError) {\n            Logger.error('[TIMELINE] Error creating timeline data:', dataError);\n            setError('Error processing timeline data: ' + String(dataError));\n            \n            DebugHelper.renderError('TimelineView-createData', dataError as Error);\n          }\n        } else {\n          // Load mock data through separate async import to reduce initial bundle size\n          import('@/utils/mockData').then(module => {\n            Logger.info('[TIMELINE] Using mock data for development');\n            const mockData = module.mockPurchaseOrders;\n            const timelineData = createTimelineData(mockData, localGroupBy, milestoneType);\n            setRows(timelineData);\n            setError('No PO data found. Using sample data for development purposes only.');\n          }).catch(err => setError('Error loading mock data: ' + String(err)));\n          \n          \n          DebugHelper.dataFetch('TimelineView', 'PurchaseOrders', 'error', {\n            error: 'No data found'\n          });\n        }\n      } catch (apiError) {\n        Logger.error('[TIMELINE] API error fetching purchase orders:', apiError);\n        setError('Failed to load timeline data: ' + (apiError instanceof Error ? apiError.message : String(apiError)));\n        \n        // Load mock data asynchronously\n        if (process.env.NODE_ENV === 'development') { \n          import('@/utils/mockData')\n            .then(module => {\n              const mockData = module.mockPurchaseOrders;\n              const timelineData = createTimelineData(mockData, localGroupBy, milestoneType);\n              setRows(timelineData);\n            })\n            .catch(err => Logger.error('[TIMELINE] Error loading mock data:', err));\n        }\n        \n        DebugHelper.dataFetch('TimelineView', 'PurchaseOrders', 'error', {\n          error: apiError instanceof Error ? apiError.message : String(apiError)\n        });\n      }\n    } catch (error) {\n      Logger.error('[TIMELINE] Unexpected error in fetchPurchaseOrders:', error);\n      setError('Unexpected error: ' + String(error));\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Enrich POs with history data if missing\n  const enrichPurchaseOrders = useCallback((purchaseOrders: PurchaseOrder[]): PurchaseOrder[] => {\n    try {\n      return purchaseOrders.map(po => {\n        // If PO already has history, use it\n        if (po.history && po.history.length > 0) {\n          return po;\n        }\n        \n        // Otherwise, generate history based on current status\n        const history = generateHistoryFromStatus(po);\n        return { ...po, history };\n      });\n    } catch (error) {\n      Logger.error('[TIMELINE] Error enriching purchase orders:', error);\n      return purchaseOrders; // Return original data on error\n    }\n  }, []);\n  \n  // Generate history based on PO status (for POs missing history)\n  const generateHistoryFromStatus = useCallback((po: PurchaseOrder) => {\n    if (!po.header || !po.header.orderDate) {\n      Logger.warn('[TIMELINE] Cannot generate history for invalid PO:', po.header?.poNumber || 'unknown');\n      return [];\n    }\n    \n    try {\n      const history = [];\n      const orderDate = new Date(po.header.orderDate);\n      \n      // Always add the initial UPLOADED status\n      history.push({\n        status: POStatus.UPLOADED,\n        timestamp: orderDate.toISOString(),\n        user: po.header.buyerInfo ? `${po.header.buyerInfo.firstName} ${po.header.buyerInfo.lastName}` : 'System'\n      });\n      \n      // Add status changes based on current status\n      switch (po.header.status) {\n        case POStatus.CONFIRMED:\n          history.push({\n            status: POStatus.CONFIRMED,\n            timestamp: addDays(orderDate, 2).toISOString(),\n            user: 'System'\n          });\n          break;\n        case POStatus.SHIPPED:\n          history.push({\n            status: POStatus.CONFIRMED,\n            timestamp: addDays(orderDate, 2).toISOString(),\n            user: 'System'\n          });\n          history.push({\n            status: POStatus.SHIPPED,\n            timestamp: addDays(orderDate, 4).toISOString(),\n            user: 'System'\n          });\n          break;\n        case POStatus.DELIVERED:\n        case POStatus.INVOICED:\n          history.push({\n            status: POStatus.CONFIRMED,\n            timestamp: addDays(orderDate, 2).toISOString(),\n            user: 'System'\n          });\n          history.push({\n            status: POStatus.SHIPPED,\n            timestamp: addDays(orderDate, 4).toISOString(),\n            user: 'System'\n          });\n          history.push({\n            status: POStatus.DELIVERED,\n            timestamp: addDays(orderDate, 8).toISOString(),\n            user: 'System'\n          });\n          if (po.header.status === POStatus.INVOICED) {\n            history.push({\n              status: POStatus.INVOICED,\n              timestamp: addDays(orderDate, 10).toISOString(),\n              user: 'System'\n            });\n          }\n          break;\n        case POStatus.CANCELLED:\n          history.push({\n            status: POStatus.CANCELLED,\n            timestamp: addDays(orderDate, 1).toISOString(),\n            user: 'System'\n          });\n          break;\n      }\n      \n      return history;\n    } catch (error) {\n      Logger.error('[TIMELINE] Error generating history for PO:', po.header?.poNumber || 'unknown', error);\n      return [];\n    }\n  }, []);\n  \n  // Create timeline data based on purchase orders and settings\n  const createTimelineData = useCallback((\n    purchaseOrders: PurchaseOrder[],\n    groupingMethod: string,\n    eventType: string\n  ): TimelineRow[] => {\n    const startTime = performance.now();\n    Logger.debug('[TIMELINE] Creating timeline data', { \n      poCount: purchaseOrders.length,\n      groupBy: groupingMethod,\n      eventType\n    });\n    \n    // Transform POs into timeline events\n    const allEvents: TimelineEvent[] = [];\n    \n    try {\n      // Process each PO and extract events\n      for (const po of purchaseOrders) {\n        try {\n          if (!po.history || po.history.length === 0) {\n            Logger.warn(`[TIMELINE] PO ${po.header?.poNumber || 'unknown'} has no history data`);\n            continue;\n          }\n          \n          if (!po.header) {\n            Logger.warn('[TIMELINE] PO missing header information', po);\n            continue;\n          }\n          \n          // Sort history entries by timestamp\n          const sortedHistory = [...po.history].sort(\n            (a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n          );\n        \n          const firstEvent = sortedHistory[0];\n          const lastEvent = sortedHistory[sortedHistory.length - 1];\n          \n          if (!firstEvent || !lastEvent) {\n            Logger.warn('[TIMELINE] Invalid history data for PO', po.header.poNumber);\n            continue;\n          }\n          \n          // Create main PO timeline bar\n          const startDate = new Date(firstEvent.timestamp);\n          const endDate = new Date(lastEvent.timestamp);\n          \n          // Only add events that match the milestone type filter\n          if (eventType === 'all' || eventType === 'status') {\n            // Main PO bar\n            allEvents.push({\n              id: `${po.header.poNumber}-main`,\n              poNumber: po.header.poNumber,\n              label: `${po.header.poNumber} (${po.header.status})`,\n              startDate,\n              endDate,\n              status: po.header.status,\n              milestoneType: 'status'\n            });\n            \n            // Status milestone markers\n            sortedHistory.forEach((historyEntry, index) => {\n              if (index === 0) return; // Skip the first one, it's the start of the main bar\n              \n              allEvents.push({\n                id: `${po.header.poNumber}-status-${index}`,\n                poNumber: po.header.poNumber,\n                label: historyEntry.status,\n                startDate: new Date(historyEntry.timestamp),\n                endDate: null, // Milestones don't have an end date\n                status: historyEntry.status as POStatus,\n                milestoneType: 'status',\n                details: historyEntry.notes\n              });\n            });\n          }\n          \n          // Add delivery milestones if requested\n          if ((eventType === 'all' || eventType === 'delivery') && po.header.deliveryInfo?.date) {\n            allEvents.push({\n              id: `${po.header.poNumber}-delivery`,\n              poNumber: po.header.poNumber,\n              label: 'Expected Delivery',\n              startDate: new Date(po.header.deliveryInfo.date),\n              endDate: null,\n              status: po.header.status,\n              milestoneType: 'delivery'\n            });\n          }\n          \n          // Add payment milestones if requested\n          if ((eventType === 'all' || eventType === 'payment') && po.invoice?.dueDate) {\n            allEvents.push({\n              id: `${po.header.poNumber}-payment`,\n              poNumber: po.header.poNumber,\n              label: 'Payment Due',\n              startDate: new Date(po.invoice.dueDate),\n              endDate: null,\n              status: po.header.status,\n              milestoneType: 'payment'\n            });\n          }\n        } catch (poError) {\n          Logger.error(`[TIMELINE] Error processing PO ${po.header?.poNumber || 'unknown'}:`, poError);\n        }\n      }\n\n      // Group events into rows based on groupBy\n      let rows: TimelineRow[] = [];\n      \n      try {\n        if (groupingMethod === 'none') {\n          // Each PO gets its own row\n          const poNumbers = [...new Set(allEvents.map(event => event.poNumber))];\n          \n          rows = poNumbers.map(poNumber => {\n            const events = allEvents.filter(event => event.poNumber === poNumber);\n            return {\n              id: poNumber,\n              label: poNumber,\n              events,\n              isExpanded: true\n            };\n          });\n        } else if (groupingMethod === 'status') {\n          // Group by status\n          const statuses: string[] = Object.values(POStatus);\n          \n          rows = statuses.map(status => {\n            const events = allEvents.filter(event => {\n              // For main PO bars, use their status\n              // For milestones, use the PO they belong to\n              if (event.endDate !== null) { // This is a PO bar\n                return event.status === status as POStatus;\n              } else {\n                // Find the main PO bar for this milestone\n                const mainPOEvent = allEvents.find(e => \n                  e.poNumber === event.poNumber && e.endDate !== null\n                );\n                return mainPOEvent && mainPOEvent.status === status as POStatus;\n              }\n            });\n            \n            return events.length > 0 ? {\n              id: status,\n              label: status as string,\n              events,\n              isExpanded: true\n            } as TimelineRow : null;\n          }).filter((row): row is TimelineRow => row !== null);\n        } else if (groupingMethod === 'supplier' || groupingMethod === 'location') {\n          // For simplicity, we'll just use the same demo grouping for both\n          const groups = ['Denver Warehouse', 'Seattle Distribution', 'Atlanta Hub', 'Chicago Distribution'];\n          \n          rows = groups.map(group => {\n            // In a real implementation, you'd match POs to their actual supplier/location\n            const events = allEvents.filter(event => \n              event.poNumber.includes(group.substring(0, 3))\n            );\n            \n            return {\n              id: group,\n              label: group,\n              events,\n              isExpanded: true\n            };\n          });\n        }\n      } catch (groupingError) {\n        Logger.error('[TIMELINE] Error grouping timeline data:', groupingError);\n        \n        // Fallback to ungrouped if grouping fails\n        const poNumbers = [...new Set(allEvents.map(event => event.poNumber))];\n        rows = poNumbers.map(poNumber => ({\n          id: poNumber,\n          label: poNumber,\n          events: allEvents.filter(event => event.poNumber === poNumber),\n          isExpanded: true\n        }));\n      }\n      \n      // Filter out empty rows\n      const filteredRows = rows.filter(row => row.events && row.events.length > 0);\n      \n      const endTime = performance.now();\n      Logger.debug('[TIMELINE] Timeline data creation complete', {\n        executionTime: `${(endTime - startTime).toFixed(2)}ms`,\n        eventCount: allEvents.length,\n        rowCount: filteredRows.length\n      });\n      \n      return filteredRows;\n    } catch (processingError) {\n      Logger.error('[TIMELINE] Critical error creating timeline data:', processingError);\n      DebugHelper.renderError('TimelineView-createTimelineData', processingError as Error);\n      return []; // Return empty array on error\n    }\n  }, []);\n  \n  // Calculate position and width for timeline bars\n  const calculateTimelinePosition = (\n    startDate: Date,\n    endDate: Date | null,\n    rangeStart: Date,\n    rangeEnd: Date\n  ) => {\n    try {\n      const totalDays = differenceInDays(rangeEnd, rangeStart) || 1;\n      const startDayOffset = Math.max(0, differenceInDays(startDate, rangeStart));\n      \n      const leftPercent = (startDayOffset / totalDays) * 100;\n      \n      if (endDate) {\n        // For bars (events with duration)\n        let durationDays = differenceInDays(endDate, startDate);\n        \n        // Ensure minimum width\n        if (durationDays === 0) durationDays = 0.5;\n        \n        const widthPercent = (durationDays / totalDays) * 100;\n        \n        return {\n          left: `${leftPercent}%`,\n          width: `${widthPercent}%`\n        };\n      } else {\n        // For milestone markers (no duration)\n        return {\n          left: `${leftPercent}%`,\n          width: 'auto'\n        };\n      }\n    } catch (error) {\n      Logger.error('[TIMELINE] Error calculating position:', error);\n      return { left: '0%', width: 'auto' }; // Fallback position\n    }\n  };\n  \n  // Format date for display\n  const formatDate = useCallback((date: Date) => {\n    try {\n      return format(date, 'MMM d, yyyy');\n    } catch (error) {\n      return 'Invalid date';\n    }\n  }, []);\n  \n  // Change zoom level\n  const handleZoom = (direction: 'in' | 'out') => {\n    setZoomLevel(prev => {\n      const newZoom = direction === 'in' ? prev + 0.5 : prev - 0.5;\n      return Math.max(0.5, Math.min(3, newZoom)); // Limit zoom between 0.5x and 3x\n    });\n  };\n  \n  // Handle time range change\n  const handleTimeRangeChange = useCallback((newRange: 'month' | 'quarter' | '6months' | 'year'): void => {\n    try {\n      Logger.debug('[TIMELINE] Time range changing to:', newRange);\n      setTimeRange(newRange);\n      \n      // Use the dedicated callback for time range changes if provided\n      if (onTimeRangeChange) {\n        Logger.debug('[TIMELINE] Calling parent onTimeRangeChange with:', newRange);\n        onTimeRangeChange(newRange);\n      }\n    } catch (error) {\n      Logger.error('[TIMELINE] Error changing time range:', error);\n    }\n  }, [onTimeRangeChange]);\n  \n  // Handle grouping change\n  const handleGroupingChange = useCallback((newGrouping: 'none' | 'supplier' | 'status' | 'location') => {\n    try {\n      Logger.debug('[TIMELINE] Grouping changing to:', newGrouping);\n      setLoading(true); // Show loading state\n      \n      if (localGroupBy !== newGrouping) {\n        setGroupBy(newGrouping);\n        // The effect will trigger a data refresh\n        fetchPurchaseOrders();\n      }\n    } catch (error) {\n      Logger.error('[TIMELINE] Error changing grouping:', error);\n      setLoading(false);\n    }\n  }, [localGroupBy, fetchPurchaseOrders]);\n  \n  // Format milestone dot color based on status\n  const getMilestoneColor = useCallback((status: POStatus, milestoneType: string): string => {\n    if (milestoneType === 'delivery') return '#FF9800'; // Orange\n    if (milestoneType === 'payment') return '#9C27B0'; // Purple\n    \n    // Status colors\n    switch (status) {\n      case POStatus.UPLOADED: return '#FF9800'; // Orange\n      case POStatus.CONFIRMED: return '#2196F3'; // Blue\n      case POStatus.SHIPPED: return '#673AB7'; // Purple\n      case POStatus.INVOICED: return '#3F51B5'; // Indigo\n      case POStatus.DELIVERED: return '#4CAF50'; // Green\n      case POStatus.CANCELLED: return '#F44336'; // Red\n      default: return '#9E9E9E'; // Grey\n    }\n  }, []);\n  \n  // Handle clicking on a timeline event\n  const handleEventClick = useCallback((poNumber: string) => {\n    try {\n      Logger.debug('[TIMELINE] Event click on PO:', poNumber);\n      \n      if (onPOSelect) {\n        onPOSelect(poNumber);\n      }\n    } catch (error) {\n      Logger.error('[TIMELINE] Error handling event click:', error);\n    }\n  }, [onPOSelect]);\n  \n  // Generate day markers for the timeline header\n  const generateDayMarkers = useCallback(() => {\n    try {\n      const totalDays = differenceInDays(visibleRange.end, visibleRange.start) || 1;\n      let markers = [];\n      \n      // Determine step size based on total days\n      let step = 1;\n      if (totalDays > 90) step = 7; // Weekly for long periods\n      else if (totalDays > 30) step = 2; // Every other day for medium periods\n      \n      for (let i = 0; i <= totalDays; i += step) {\n        const date = addDays(visibleRange.start, i);\n        const position = (i / totalDays) * 100;\n        \n        markers.push(\n          <div \n            key={`day-${i}`} \n            className=\"timeline-day-marker\" \n            style={{ left: `${position}%`, position: 'absolute' }}\n          >\n            {format(date, 'MMM d')}\n          </div>\n        );\n      }\n      \n      return markers;\n    } catch (error) {\n      Logger.error('[TIMELINE] Error generating day markers:', error);\n      return [];\n    }\n  }, [visibleRange.start, visibleRange.end]);\n  \n  // Toggle row expansion\n  const toggleRowExpansion = useCallback((rowId: string) => {\n    try {\n      setRows(prevRows =>\n        prevRows.map(row =>\n          row.id === rowId\n            ? { ...row, isExpanded: !row.isExpanded }\n            : row\n        )\n      );\n    } catch (error) {\n      Logger.error('[TIMELINE] Error toggling row expansion:', error);\n    }\n  }, []);\n  \n  // Memoize components that don't need to rerender frequently\n  const CardHeader = useMemo(() => (\n    <Card.Header className=\"d-flex justify-content-between align-items-center\">\n      <h5 className=\"mb-0\">\n        <i className=\"bi bi-bar-chart-steps me-2\"></i>\n        Timeline View\n      </h5>\n      \n      <div className=\"d-flex gap-2\">\n        <div className=\"btn-group me-2\" role=\"group\" aria-label=\"Zoom controls\">\n          <Button \n            variant=\"outline-secondary\" \n            title=\"Zoom In\"\n            size=\"sm\" \n            onClick={() => handleZoom('in')}\n            disabled={zoomLevel >= 3}\n          >\n            <i className=\"bi bi-zoom-in\"></i>\n          </Button>\n          <Button \n            variant=\"outline-secondary\" \n            title=\"Zoom Out\"\n            size=\"sm\" \n            onClick={() => handleZoom('out')}\n            disabled={zoomLevel <= 0.5}\n          >\n            <i className=\"bi bi-zoom-out\"></i>\n          </Button>\n        </div>\n        \n        {/* Time range selector */}\n        <Dropdown>\n          <Dropdown.Toggle variant=\"outline-secondary\" size=\"sm\">\n            <i className=\"bi bi-clock-history me-1\"></i> \n            {localTimeRange === 'month' ? 'Last 30 Days' : \n             localTimeRange === 'quarter' ? 'Last 90 Days' : \n             localTimeRange === '6months' ? 'Last 6 Months' : 'Last Year'}\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            <Dropdown.Item \n              active={localTimeRange === 'month'} \n              onClick={() => handleTimeRangeChange('month')}\n            >\n              Last 30 Days\n            </Dropdown.Item>\n            <Dropdown.Item \n              active={localTimeRange === 'quarter'} \n              onClick={() => handleTimeRangeChange('quarter')}\n            >\n              Last 90 Days\n            </Dropdown.Item>\n            <Dropdown.Item \n              active={localTimeRange === '6months'} \n              onClick={() => handleTimeRangeChange('6months')}\n            >\n              Last 6 Months\n            </Dropdown.Item>\n            <Dropdown.Item \n              active={localTimeRange === 'year'} \n              onClick={() => handleTimeRangeChange('year')}\n            >\n              Last Year\n            </Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n        \n        {/* Group by selector */}\n        <Dropdown className=\"me-2\">\n          <Dropdown.Toggle variant=\"outline-secondary\" size=\"sm\">\n            <i className=\"bi bi-collection me-1\"></i> Group: {localGroupBy === 'none' ? 'None' : localGroupBy}\n          </Dropdown.Toggle>\n          <Dropdown.Menu>\n            <Dropdown.Item active={localGroupBy === 'none'} onClick={() => handleGroupingChange('none')}>None</Dropdown.Item>\n            <Dropdown.Item active={localGroupBy === 'status'} onClick={() => handleGroupingChange('status')}>By Status</Dropdown.Item>\n            <Dropdown.Item active={localGroupBy === 'supplier'} onClick={() => handleGroupingChange('supplier')}>By Supplier</Dropdown.Item>\n            <Dropdown.Item active={localGroupBy === 'location'} onClick={() => handleGroupingChange('location')}>By Location</Dropdown.Item>\n          </Dropdown.Menu>\n        </Dropdown>\n        \n        <Button variant=\"outline-primary\" size=\"sm\" onClick={fetchPurchaseOrders}>\n          <i className=\"bi bi-sliders me-1\"></i> Filter\n        </Button>\n      </div>\n    </Card.Header>\n  ), [localTimeRange, handleTimeRangeChange, localGroupBy, handleGroupingChange, zoomLevel, fetchPurchaseOrders]);\n  \n  // Memoize the timeline rows component\n  const TimelineRows = useCallback(({ rows }: { rows: TimelineRow[] }) => (\n    rows.map(row => (\n      <div key={row.id} className=\"timeline-row-container mb-2\">\n        <div className=\"timeline-row d-flex py-2 border-bottom\">\n          <div \n            className=\"timeline-legend d-flex align-items-center me-3\" \n            style={{ minWidth: '150px' }}\n          >\n            <Button \n              variant=\"link\" \n              className=\"p-0 me-2\" \n              onClick={() => toggleRowExpansion(row.id)}\n            >\n              <i className={`bi ${row.isExpanded ? 'bi-chevron-down' : 'bi-chevron-right'}`}></i>\n            </Button>\n            <span className=\"fw-bold\">{row.label}</span>\n          </div>\n          \n          <div \n            className=\"timeline-grid position-relative flex-grow-1\"\n            style={{ \n              transform: `scaleX(${zoomLevel})`,\n              transformOrigin: 'left',\n              height: '30px'\n            }}\n          >\n            {/* Events */}\n            {row.events.filter(event => event.endDate !== null).map(event => {\n              try {\n                const position = calculateTimelinePosition(\n                  event.startDate, \n                  event.endDate || addDays(event.startDate, 1),\n                  visibleRange.start,\n                  visibleRange.end\n                );\n                \n                return (\n                  <OverlayTrigger\n                    key={event.id}\n                    placement=\"top\"\n                    overlay={\n                      <Tooltip>\n                        {event.label}\n                        <br/>From: {formatDate(event.startDate)}\n                        <br/>To: {event.endDate ? formatDate(event.endDate) : 'N/A'}\n                      </Tooltip>\n                    }\n                  >\n                    <div\n                      className=\"timeline-event position-absolute rounded\"\n                      style={{\n                        ...position,\n                        top: '5px',\n                        height: '20px',\n                        backgroundColor: getMilestoneColor(event.status, event.milestoneType),\n                        cursor: 'pointer'\n                      }}\n                      onClick={() => handleEventClick(event.poNumber)}\n                    >\n                    </div>\n                  </OverlayTrigger>\n                );\n              } catch (renderError) {\n                // Skip rendering this event on error\n                Logger.error('[TIMELINE] Error rendering event:', renderError);\n                return null;\n              }\n            })}\n            \n            {/* Milestone markers */}\n            {row.events.filter(event => event.endDate === null).map(event => {\n              try {\n                const position = calculateTimelinePosition(\n                  event.startDate, \n                  null,\n                  visibleRange.start,\n                  visibleRange.end\n                );\n                \n                return (\n                  <OverlayTrigger\n                    key={event.id}\n                    placement=\"top\"\n                    overlay={\n                      <Tooltip>\n                        {event.label}\n                        <br/>Date: {formatDate(event.startDate)}\n                        {event.details ? <><br/>{event.details}</> : null}\n                      </Tooltip>\n                    }\n                  >\n                    <div\n                      className=\"timeline-milestone position-absolute\"\n                      style={{\n                        ...position,\n                        top: '10px',\n                        width: '10px',\n                        height: '10px',\n                        borderRadius: '50%',\n                        backgroundColor: getMilestoneColor(event.status, event.milestoneType),\n                        cursor: 'pointer',\n                        border: '1px solid white'\n                      }}\n                      onClick={() => handleEventClick(event.poNumber)}\n                    >\n                    </div>\n                  </OverlayTrigger>\n                );\n              } catch (renderError) {\n                // Skip rendering this milestone on error\n                Logger.error('[TIMELINE] Error rendering milestone:', renderError);\n                return null;\n              }\n            })}\n          </div>\n        </div>\n        \n        {/* Expanded details */}\n        {row.isExpanded && (\n          <div className=\"timeline-row-details\">\n            <div className=\"ps-5 pt-2 pb-3\">\n              <div className=\"small text-muted\">\n                Contains {row.events.filter(e => e.endDate !== null).length} PO bars and\n                {' '}{row.events.filter(e => e.endDate === null).length} milestones\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    ))\n  ), [calculateTimelinePosition, visibleRange.start, visibleRange.end, formatDate, getMilestoneColor, handleEventClick, toggleRowExpansion, zoomLevel]);\n  \n  // Memoize the legend component\n  const TimelineLegend = useMemo(() => (\n    <div className=\"timeline-legend-container d-flex justify-content-center mt-3 mb-2 gap-4\">\n      {/* Legend for different event types */}\n      <div className=\"d-flex align-items-center\">\n        <div \n          className=\"rounded me-2\" \n          style={{ \n            width: '20px', \n            height: '10px', \n            backgroundColor: getMilestoneColor(POStatus.CONFIRMED, 'status')\n          }}\n        ></div>\n        <span className=\"small\">PO Duration</span>\n      </div>\n      \n      <div className=\"d-flex align-items-center\">\n        <div \n          className=\"rounded-circle me-2\" \n          style={{ \n            width: '10px', \n            height: '10px', \n            backgroundColor: getMilestoneColor(POStatus.CONFIRMED, 'status')\n          }}\n        ></div>\n        <span className=\"small\">Status Change</span>\n      </div>\n      \n      <div className=\"d-flex align-items-center\">\n        <div \n          className=\"rounded-circle me-2\" \n          style={{ \n            width: '10px', \n            height: '10px', \n            backgroundColor: getMilestoneColor(POStatus.CONFIRMED, 'delivery')\n          }}\n        ></div>\n        <span className=\"small\">Delivery Milestone</span>\n      </div>\n      \n      <div className=\"d-flex align-items-center\">\n        <div \n          className=\"rounded-circle me-2\" \n          style={{ \n            width: '10px', \n            height: '10px', \n            backgroundColor: getMilestoneColor(POStatus.CONFIRMED, 'payment')\n          }}\n        ></div>\n        <span className=\"small\">Payment Milestone</span>\n      </div>\n    </div>\n  ), [getMilestoneColor]);\n\n  // Render appropriate component based on loading/error state\n  const renderContent = () => {\n    if (loading) {\n      return (\n        <Card.Body className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: '500px' }}>\n          <div className=\"text-center\">\n            <Spinner animation=\"border\" variant=\"primary\" />\n            <p className=\"mt-3 text-muted\">Loading timeline data...</p>\n          </div>\n        </Card.Body>\n      );\n    }\n    \n    if (error && rows.length === 0) {\n      return (\n        <Card.Body>\n          <Alert variant=\"danger\">\n            <Alert.Heading>Failed to load timeline</Alert.Heading>\n            <p>{error}</p>\n            <div className=\"d-flex justify-content-end\">\n              <Button \n                variant=\"outline-danger\" \n                size=\"sm\" \n                onClick={fetchPurchaseOrders}\n              >\n                Retry\n              </Button>\n            </div>\n          </Alert>\n        </Card.Body>\n      );\n    }\n    \n    return (\n      <Card.Body className=\"p-0\">\n        <div className=\"timeline-container p-3\">\n          <div className=\"timeline-header px-4 py-2 border-bottom\">\n            <div className=\"timeline-row d-flex\">\n              <div className=\"timeline-legend me-3\" style={{ minWidth: '150px' }}>\n                <strong>Timeline</strong>\n              </div>\n              <div className=\"timeline-grid position-relative flex-grow-1\">\n                {/* Day markers */}\n                {generateDayMarkers()}\n              </div>\n            </div>\n          </div>\n          \n          <div \n            className=\"timeline-body\"\n            ref={timelineRef}\n            style={{ \n              overflowX: 'auto',\n              overflowY: 'auto',\n              maxHeight: '600px'\n            }}\n          >\n            {rows.length > 0 ? (\n              <TimelineRows rows={rows} />\n            ) : (\n              <div className=\"p-5 text-center\">\n                <p className=\"text-muted\">No data to display in the selected time range.</p>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {TimelineLegend}\n      </Card.Body>\n    );\n  };\n  \n  return (\n    <div className={`timeline-view ${className}`}>\n      <Card className=\"h-100 shadow-sm\">\n        {CardHeader}\n        {renderContent()}\n      </Card>\n    </div>\n  );\n};\n\nexport default TimelineView;"],"file":"assets/TimelineView-By6m8i9H.js"}