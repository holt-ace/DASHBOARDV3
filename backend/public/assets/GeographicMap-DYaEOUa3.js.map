{"version":3,"file":"GeographicMap-DYaEOUa3.js","sources":["../../src/components/visualizations/GeographicMap.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Card, Alert, Spinner, Button, Dropdown, Badge, Form } from 'react-bootstrap';\nimport { ApiService } from '@/services/ApiService';\nimport { PurchaseOrder, POStatus } from '@/types/purchaseOrder';\nimport L from 'leaflet';\nimport Logger from '@/utils/logger';\nimport 'leaflet/dist/leaflet.css';\n// Note: In a real implementation, we would import these libraries:\n// import 'leaflet.markercluster/dist/MarkerCluster.css';\n// import 'leaflet.markercluster/dist/MarkerCluster.Default.css';\n// import 'leaflet.markercluster';\n\n// Type for map markers\ninterface MapMarker {\n  id: string;\n  poNumber: string;\n  lat: number;\n  lng: number;\n  status: POStatus;\n  location: string;\n  totalCost: number;\n  deliveryDate?: string;\n  selected?: boolean; // For batch selection\n}\n\n// Props for the GeographicMap component\ninterface GeographicMapProps {\n  region?: 'all' | 'north-america' | 'europe' | 'asia-pacific' | 'latin-america';\n  deliveryStatus?: 'all' | 'pending' | 'in-transit' | 'delivered';\n  timePeriod?: 'current-month' | 'last-3-months' | 'ytd' | 'custom';\n  onPOSelect?: (poNumber: string) => void;\n  onBatchSelectionChange?: (poNumbers: string[]) => void; // Added for batch operations\n  onComponentRender?: (renderTime: number) => void;\n  className?: string;\n}\n\n/**\n * GeographicMap Component\n * \n * Displays purchase orders on an interactive map based on delivery locations.\n * Supports marker clustering, filtering by region and delivery status, and\n * detailed information display for selected markers.\n * \n * Uses Leaflet for map rendering and Leaflet.MarkerCluster for clustering.\n */\nconst GeographicMap: React.FC<GeographicMapProps> = ({\n  region = 'all',\n  deliveryStatus = 'all',\n  timePeriod = 'current-month',\n  onPOSelect,\n  onBatchSelectionChange,\n  onComponentRender,\n  className = ''\n}) => {\n  // Performance tracking\n  const renderStartTime = useRef<number>(0);\n  \n  // DOM refs\n  const mapContainerRef = useRef<HTMLDivElement>(null);\n  \n  // Map instance and layers\n  const [mapInstance, setMapInstance] = useState<L.Map | null>(null);\n  const [markersLayer, setMarkersLayer] = useState<L.LayerGroup | null>(null);\n  const [infoPopup, setInfoPopup] = useState<L.Popup | null>(null);\n  \n  // Loading and error states\n  const [loading, setLoading] = useState<boolean>(true);\n  const [isRefreshing, setIsRefreshing] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\n  \n  // State for all markers and selected markers\n  const [mapMarkers, setMapMarkers] = useState<MapMarker[]>([]);\n  const [selectedPOs, setSelectedPOs] = useState<string[]>([]);\n  const [selectionMode, setSelectionMode] = useState<boolean>(false);\n  const [poCount, setPOCount] = useState<number>(0);\n  \n  // Local state for filters\n  const [localRegion, setLocalRegion] = useState<string>(region);\n  const [localDeliveryStatus, setLocalDeliveryStatus] = useState<string>(deliveryStatus);\n  const [localTimePeriod, setLocalTimePeriod] = useState<string>(timePeriod);\n  const [searchText, setSearchText] = useState<string>('');\n  \n  // Get initial map center and zoom based on region\n  const getMapSettings = (regionValue: string): { center: L.LatLngExpression, zoom: number } => {\n    switch (regionValue) {\n      case 'north-america':\n        return { center: [39.8283, -98.5795], zoom: 4 }; // Center of US\n      case 'europe':\n        return { center: [54.5260, 15.2551], zoom: 4 };  // Center of Europe\n      case 'asia-pacific':\n        return { center: [34.0479, 100.6197], zoom: 3 }; // Center of Asia\n      case 'latin-america':\n        return { center: [-8.7832, -55.4915], zoom: 4 }; // Center of South America\n      default:\n        return { center: [20.0, 0.0], zoom: 2 };         // World view\n    }\n  };\n\n  // Geocode an address to coordinates\n  // In a real implementation, this would call a geocoding service\n  const geocodeAddress = async (address: string): Promise<{ lat: number; lng: number } | null> => {\n    // For the demo, we'll check if the address contains certain keywords\n    // to determine which mock region to return coordinates for\n    try {\n      // Simulate some geocoding delay for realism\n      await new Promise(resolve => setTimeout(resolve, 10));\n      \n      // Simple geocoding logic based on text\n      const lowerCase = address.toLowerCase();\n      \n      if (!address) return null;\n      \n      // Check for region keywords\n      if (lowerCase.includes('denver') || lowerCase.includes('colorado')) {\n        return { lat: 39.7392, lng: -104.9903 }; // Denver\n      } else if (lowerCase.includes('seattle') || lowerCase.includes('washington')) {\n        return { lat: 47.6062, lng: -122.3321 }; // Seattle\n      } else if (lowerCase.includes('atlanta') || lowerCase.includes('georgia')) {\n        return { lat: 33.7490, lng: -84.3880 }; // Atlanta\n      } else if (lowerCase.includes('chicago') || lowerCase.includes('illinois')) {\n        return { lat: 41.8781, lng: -87.6298 }; // Chicago\n      } else if (lowerCase.includes('new york') || lowerCase.includes('ny')) {\n        return { lat: 40.7128, lng: -74.0060 }; // New York\n      } else if (lowerCase.includes('los angeles') || lowerCase.includes('la')) {\n        return { lat: 34.0522, lng: -118.2437 }; // Los Angeles\n      } else if (lowerCase.includes('miami') || lowerCase.includes('florida')) {\n        return { lat: 25.7617, lng: -80.1918 }; // Miami\n      } else if (lowerCase.includes('boston') || lowerCase.includes('massachusetts')) {\n        return { lat: 42.3601, lng: -71.0589 }; // Boston\n      } else if (lowerCase.includes('london') || lowerCase.includes('uk')) {\n        return { lat: 51.5074, lng: -0.1278 }; // London (Europe)\n      } else if (lowerCase.includes('paris') || lowerCase.includes('france')) {\n        return { lat: 48.8566, lng: 2.3522 }; // Paris (Europe)\n      } else if (lowerCase.includes('tokyo') || lowerCase.includes('japan')) {\n        return { lat: 35.6762, lng: 139.6503 }; // Tokyo (Asia)\n      } else if (lowerCase.includes('sydney') || lowerCase.includes('australia')) {\n        return { lat: -33.8688, lng: 151.2093 }; // Sydney (Asia-Pacific)\n      } else if (lowerCase.includes('sao paulo') || lowerCase.includes('brazil')) {\n        return { lat: -23.5505, lng: -46.6333 }; // Sao Paulo (Latin America)\n      } else if (lowerCase.includes('mexico')) {\n        return { lat: 19.4326, lng: -99.1332 }; // Mexico City (Latin America)\n      }\n      \n      // Try to determine region based on state/country\n      if (lowerCase.includes('ca') || lowerCase.includes('tx') || lowerCase.includes('ny')) {\n        // Random US location\n        return {\n          lat: 37.0902 + (Math.random() * 5 - 2.5),\n          lng: -95.7129 + (Math.random() * 10 - 5)\n        };\n      } else if (lowerCase.includes('uk') || lowerCase.includes('germany') || lowerCase.includes('france')) {\n        // Random Europe location\n        return {\n          lat: 50.0 + (Math.random() * 5 - 2.5),\n          lng: 10.0 + (Math.random() * 10 - 5)\n        };\n      } else if (lowerCase.includes('china') || lowerCase.includes('japan') || lowerCase.includes('australia')) {\n        // Random Asia-Pacific location\n        return {\n          lat: 30.0 + (Math.random() * 10 - 5),\n          lng: 110.0 + (Math.random() * 20 - 10)\n        };\n      } else if (lowerCase.includes('brazil') || lowerCase.includes('mexico') || lowerCase.includes('argentina')) {\n        // Random Latin America location\n        return {\n          lat: -10.0 + (Math.random() * 10 - 5),\n          lng: -70.0 + (Math.random() * 10 - 5)\n        };\n      }\n      \n      // Default: generate random global coordinates\n      return {\n        lat: (Math.random() * 180 - 90) * 0.5,  // -45 to 45\n        lng: (Math.random() * 360 - 180) * 0.5  // -90 to 90\n      };\n    } catch (error) {\n      Logger.error('Geocoding error:', error);\n      return null;\n    }\n  };\n  \n  // Determine which region a set of coordinates belongs to\n  const getRegionFromCoordinates = (lat: number, lng: number): string => {\n    // North America rough boundaries\n    if (lat >= 15 && lat <= 70 && lng >= -170 && lng <= -50) {\n      return 'north-america';\n    }\n    // Europe rough boundaries\n    else if (lat >= 35 && lat <= 70 && lng >= -10 && lng <= 40) {\n      return 'europe';\n    }\n    // Asia-Pacific rough boundaries\n    else if ((lat >= -50 && lat <= 70 && lng >= 60 && lng <= 180) || \n             (lat >= -50 && lat <= 70 && lng >= -180 && lng <= -130)) {\n      return 'asia-pacific';\n    }\n    // Latin America rough boundaries\n    else if (lat >= -60 && lat <= 32 && lng >= -120 && lng <= -30) {\n      return 'latin-america';\n    }\n    \n    return 'other';\n  };\n  \n  // Fetch purchase orders from API\n  const fetchPurchaseOrders = useCallback(async () => {\n    // Performance measurement\n    renderStartTime.current = performance.now();\n    \n    if (loading) {\n      setIsRefreshing(false);  // Initial load\n    } else {\n      setIsRefreshing(true);   // Refreshing existing data\n    }\n    \n    try {\n      // Get date range based on time period\n      const now = new Date();\n      let startDate = new Date(now);\n      \n      switch (localTimePeriod) {\n        case 'current-month':\n          startDate.setMonth(startDate.getMonth() - 1);\n          break;\n        case 'last-3-months':\n          startDate.setMonth(startDate.getMonth() - 3);\n          break;\n        case 'ytd':\n          startDate = new Date(now.getFullYear(), 0, 1); // Jan 1 of current year\n          break;\n        default:\n          startDate.setMonth(startDate.getMonth() - 1); // Default to 1 month\n      }\n      \n      // Fetch POs from API with date range\n      const response = await ApiService.fetchPOs({\n        startDate: startDate.toISOString(),\n        endDate: now.toISOString(),\n        limit: 100\n      });\n      \n      if (response && response.data && response.data.length > 0) {\n        Logger.info(`Found ${response.data.length} POs for map`);\n        setPOCount(response.data.length);\n        await processPurchaseOrders(response.data);\n        setLastUpdated(new Date());\n        setError(null);\n        \n        // Report rendering performance\n        if (onComponentRender) {\n          const renderTime = performance.now() - renderStartTime.current;\n          onComponentRender(renderTime);\n        }\n      } else {\n        Logger.info('No POs found');\n        setError('No purchase order data found in the selected date range.');\n        // Only use mock data in development mode\n        if (process.env.NODE_ENV === 'development') {\n          Logger.info('Using mock data for development');\n          const mockData = getMockPurchaseOrders();\n          setPOCount(mockData.length);\n          await processPurchaseOrders(mockData);\n          setLastUpdated(new Date());\n          \n          // Report rendering performance with mock data\n          if (onComponentRender) {\n            const renderTime = performance.now() - renderStartTime.current;\n            onComponentRender(renderTime);\n          }\n          setError('No PO data found. Using sample data for development purposes only.');\n        } else {\n          setPOCount(0);\n          setMapMarkers([]);\n          setLastUpdated(new Date());\n        }\n      }\n    } catch (err) {\n      Logger.error('Error fetching purchase orders:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load map data');\n      \n      // Only use mock data in development mode\n      if (process.env.NODE_ENV === 'development') {\n        Logger.info('Using mock data for development');\n        const mockData = getMockPurchaseOrders();\n        setPOCount(mockData.length);\n        await processPurchaseOrders(mockData);\n        \n        // Report rendering performance\n        if (onComponentRender) {\n          const renderTime = performance.now() - renderStartTime.current;\n          onComponentRender(renderTime);\n        }\n      } else {\n        setPOCount(0);\n        setMapMarkers([]);\n      }\n    } finally {\n      setLoading(false);\n      setIsRefreshing(false);\n    }\n  }, [localRegion, localDeliveryStatus, localTimePeriod]);\n  \n  // Process POs and extract location data\n  const processPurchaseOrders = async (purchaseOrders: PurchaseOrder[]) => {\n    try {\n      // Filter POs based on region and status\n      const filteredPOs = filterPurchaseOrders(purchaseOrders, localRegion, localDeliveryStatus);\n      \n      // Extract markers from POs with geocoding\n      const markers = await createMapMarkers(filteredPOs);\n      setMapMarkers(markers);\n      \n      // Add markers to the map\n      if (mapInstance && markersLayer) {\n        updateMapMarkers(markers);\n        \n        // Report performance after marker generation\n        if (onComponentRender && renderStartTime.current > 0) {\n          const renderTime = performance.now() - renderStartTime.current;\n          Logger.debug(`[MAP] Markers processed in ${renderTime}ms`);\n        }\n      }\n    } catch (err) {\n      Logger.error('Error processing purchase orders:', err);\n      setError(err instanceof Error ? err.message : 'Failed to process map data');\n    }\n  };\n\n  // Filter purchase orders based on criteria\n  const filterPurchaseOrders = (\n    purchaseOrders: PurchaseOrder[],\n    _regionFilter: string, // Using underscore prefix to indicate intentional non-use\n    statusFilter: string\n  ): PurchaseOrder[] => {\n    return purchaseOrders.filter(po => {\n      // Filter by search text if provided\n      if (searchText) {\n        const searchLower = searchText.toLowerCase();\n        const matchesSearch = \n          po.header.poNumber.toLowerCase().includes(searchLower) ||\n          po.header.syscoLocation?.name.toLowerCase().includes(searchLower) ||\n          po.header.buyerInfo?.firstName.toLowerCase().includes(searchLower) ||\n          po.header.buyerInfo?.lastName.toLowerCase().includes(searchLower);\n          \n        if (!matchesSearch) return false;\n      }\n      \n      // Filter by status\n      if (statusFilter !== 'all') {\n        if (statusFilter === 'pending' && ![POStatus.UPLOADED, POStatus.CONFIRMED].includes(po.header.status)) {\n          return false;\n        }\n        if (statusFilter === 'in-transit' && ![POStatus.SHIPPED].includes(po.header.status)) {\n          return false;\n        }\n        if (statusFilter === 'delivered' && ![POStatus.DELIVERED, POStatus.INVOICED].includes(po.header.status)) {\n          return false;\n        }\n      }\n      \n      // We'll filter by region after geocoding\n      return true;\n    });\n  };\n  \n  // Transform POs to map markers with geocoding\n  const createMapMarkers = async (purchaseOrders: PurchaseOrder[]): Promise<MapMarker[]> => {\n    // Filter POs that have location information\n    const posWithLocation = purchaseOrders.filter(po => {\n      return po.header && po.header.syscoLocation && po.header.syscoLocation.name;\n    });\n    \n    // Process POs with geocoding (in batches to avoid overloading)\n    const markers: MapMarker[] = [];\n    const batchSize = 5;\n    \n    for (let i = 0; i < posWithLocation.length; i += batchSize) {\n      const batch = posWithLocation.slice(i, i + batchSize);\n      \n      // Process batch in parallel\n      const batchResults = await Promise.all(\n        batch.map(async (po) => {\n          try {\n            // Get address to geocode\n            const address = po.header.syscoLocation.address || po.header.syscoLocation.name;\n            \n            // Geocode the address\n            const coords = await geocodeAddress(address);\n            \n            if (!coords) return null;\n            \n            // Create marker\n            const marker: MapMarker = {\n              id: po.header.poNumber,\n              poNumber: po.header.poNumber,\n              lat: coords.lat,\n              lng: coords.lng,\n              status: po.header.status,\n              location: po.header.syscoLocation.name,\n              totalCost: po.totalCost,\n              deliveryDate: po.header.deliveryInfo?.date,\n              selected: selectedPOs.includes(po.header.poNumber)\n            };\n            \n            return marker;\n          } catch (error) {\n            Logger.error(`Error processing PO ${po.header.poNumber}:`, error);\n            return null;\n          }\n        })\n      );\n      \n      // Add valid markers to the list\n      batchResults.forEach(result => {\n        if (result !== null) {\n          markers.push(result);\n        }\n      });\n    }\n    \n    // Filter by region if needed\n    if (localRegion !== 'all') {\n      return markers.filter(marker => {\n        const markerRegion = getRegionFromCoordinates(marker.lat, marker.lng);\n        return markerRegion === localRegion;\n      });\n    }\n    \n    return markers;\n  };\n  \n  // Update markers on the map\n  const updateMapMarkers = useCallback((markers: MapMarker[]) => {\n    if (!mapInstance || !markersLayer) return;\n    \n    // Clear existing markers\n    markersLayer.clearLayers();\n\n    // Create a SimulatedMarkerCluster (since we're not importing the actual library)\n    // In a real app, we would use the L.MarkerClusterGroup from the leaflet.markercluster library\n    const SimulatedMarkerCluster = L.layerGroup();\n    \n    // Add new markers\n    markers.forEach(marker => {\n      const icon = L.divIcon({\n        className: `map-marker status-${marker.status.toLowerCase()} ${marker.selected ? 'selected' : ''}`,\n        html: `<div style=\"background-color: ${getStatusColor(marker.status)}; ${marker.selected ? 'border: 3px solid #FFC107;' : ''}\"></div>`,\n        iconSize: [24, 24],\n        iconAnchor: [12, 12]\n      });\n      \n      const leafletMarker = L.marker([marker.lat, marker.lng], { icon })\n        .on('click', (e) => {\n          // If in selection mode, toggle selection\n          if (selectionMode) {\n            toggleMarkerSelection(marker.poNumber);\n            // Prevent popup in selection mode\n            e.originalEvent.stopPropagation();\n          } else {\n            handleMarkerClick(marker);\n          }\n        });\n      \n      // Add to cluster group\n      SimulatedMarkerCluster.addLayer(leafletMarker);\n    });\n    \n    // Add cluster group to map\n    markersLayer.addLayer(SimulatedMarkerCluster);\n    \n    // Update the map view if we have markers\n    if (markers.length > 0) {\n      try {\n        const bounds = L.featureGroup(\n          markers.map(m => L.marker([m.lat, m.lng]))\n        ).getBounds();\n        \n        // Only adjust bounds if we have multiple markers or are zoomed out\n        if (markers.length > 1 || mapInstance.getZoom() < 4) {\n          mapInstance.fitBounds(bounds, { \n            padding: [50, 50], \n            maxZoom: 10\n          });\n        }\n      } catch (error) {\n        Logger.error('Error fitting bounds:', error);\n      }\n    }\n  }, [mapInstance, markersLayer, selectionMode, selectedPOs]);\n  \n  // Handle marker selection for batch operations\n  const toggleMarkerSelection = (poNumber: string) => {\n    setMapMarkers(prev => \n      prev.map(marker => \n        marker.poNumber === poNumber \n          ? { ...marker, selected: !marker.selected } \n          : marker\n      )\n    );\n    \n    setSelectedPOs(prev => {\n      const isSelected = prev.includes(poNumber);\n      const newSelection = isSelected\n        ? prev.filter(p => p !== poNumber)\n        : [...prev, poNumber];\n        \n      // Notify parent component if callback provided\n      if (onBatchSelectionChange) {\n        onBatchSelectionChange(newSelection);\n      }\n      \n      return newSelection;\n    });\n  };\n  \n  // Toggle selection mode\n  const toggleSelectionMode = () => {\n    setSelectionMode(prev => !prev);\n    \n    // If turning off selection mode, clear selections\n    if (selectionMode) {\n      clearSelections();\n    }\n  };\n  \n  // Clear all selections\n  const clearSelections = () => {\n    setSelectedPOs([]);\n    setMapMarkers(prev => \n      prev.map(marker => ({ ...marker, selected: false }))\n    );\n    \n    // Notify parent component\n    if (onBatchSelectionChange) {\n      onBatchSelectionChange([]);\n    }\n  };\n  \n  // Initialize map when component mounts\n  useEffect(() => {\n    if (!mapContainerRef.current) return;\n    \n    // Get initial map settings\n    renderStartTime.current = performance.now();\n    \n    const { center, zoom } = getMapSettings(localRegion);\n    \n    // Create Leaflet map\n    const map = L.map(mapContainerRef.current).setView(center, zoom);\n    \n    // Add tile layer (map background)\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(map);\n    \n    // Create a layer group for markers\n    const layerGroup = L.layerGroup().addTo(map);\n\n    // Store references\n    setMapInstance(map);\n    setMarkersLayer(layerGroup);\n    \n    // Fetch data\n    fetchPurchaseOrders();\n\n    Logger.debug(`[MAP] Map initialized in ${performance.now() - renderStartTime.current}ms`);\n    \n    // Cleanup on unmount\n    return () => {\n      map.remove();\n      setMapInstance(null);\n      setMarkersLayer(null);\n    };\n  }, []);\n  \n  // Update map when filters change\n  useEffect(() => {\n    if (mapInstance && markersLayer) {\n      // Update map center and zoom based on region\n      // Performance measurement\n      renderStartTime.current = performance.now();\n      \n      const { center, zoom } = getMapSettings(localRegion);\n      mapInstance.setView(center, zoom);\n      \n      // Refetch data with new filters\n      fetchPurchaseOrders();\n    }\n  }, [localRegion, localDeliveryStatus, localTimePeriod, fetchPurchaseOrders]);\n  \n  // Update markers when selection changes\n  useEffect(() => {\n    if (mapMarkers.length > 0 && mapInstance && markersLayer) {\n      // Measure performance of marker updates\n      const updateStart = performance.now();\n      \n      updateMapMarkers(mapMarkers);\n      \n      Logger.debug(`[MAP] Markers updated in ${performance.now() - updateStart}ms`);\n    }\n  }, [selectedPOs, mapMarkers, updateMapMarkers]);\n  \n  // Handle marker click\n  const handleMarkerClick = (marker: MapMarker) => {\n    // Remove existing popup if any\n    if (infoPopup) {\n      infoPopup.remove();\n    }\n    \n    // Create and show popup\n    const popup = L.popup()\n      .setLatLng([marker.lat, marker.lng])\n      .setContent(`\n        <div class=\"marker-info-popup\">\n          <h6>${marker.poNumber}</h6>\n          <div class=\"mb-2\">\n            <span class=\"status-badge ${marker.status.toLowerCase()}\">${marker.status}</span>\n          </div>\n          <div class=\"mb-1\"><strong>Location:</strong> ${marker.location}</div>\n          <div class=\"mb-1\"><strong>Total:</strong> ${formatCurrency(marker.totalCost)}</div>\n          ${marker.deliveryDate ? \n            `<div class=\"mb-1\"><strong>Delivery:</strong> ${formatDate(marker.deliveryDate)}</div>` : \n            ''}\n          <div class=\"d-flex justify-content-between mt-2\">\n            <button class=\"select-po-btn\">\n              ${marker.selected ? 'Deselect' : 'Select'}\n            </button>\n            <button class=\"view-details-btn\">View Details</button>\n          </div>\n        </div>\n      `)\n      .openOn(mapInstance!);\n    \n    // Add click handlers to the popup buttons\n    setTimeout(() => {\n      const viewDetailsBtn = document.querySelector('.view-details-btn');\n      if (viewDetailsBtn) {\n        viewDetailsBtn.addEventListener('click', () => {\n          if (onPOSelect) {\n            onPOSelect(marker.poNumber);\n          }\n        });\n      }\n      \n      const selectPOBtn = document.querySelector('.select-po-btn');\n      if (selectPOBtn) {\n        selectPOBtn.addEventListener('click', () => {\n          toggleMarkerSelection(marker.poNumber);\n          popup.close();\n        });\n      }\n    }, 0);\n    \n    // Store popup reference\n    setInfoPopup(popup);\n  };\n  \n  // Get status color for markers\n  const getStatusColor = (status: POStatus): string => {\n    switch (status) {\n      case POStatus.UPLOADED: return '#FF9800'; // Orange\n      case POStatus.CONFIRMED: return '#2196F3'; // Blue\n      case POStatus.SHIPPED: return '#673AB7'; // Purple\n      case POStatus.INVOICED: return '#3F51B5'; // Indigo\n      case POStatus.DELIVERED: return '#4CAF50'; // Green\n      case POStatus.CANCELLED: return '#F44336'; // Red\n      default: return '#9E9E9E'; // Grey\n    }\n  };\n  \n  // Format date for display\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return 'N/A';\n    \n    try {\n      const date = new Date(dateString);\n      return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      });\n    } catch (error) {\n      return dateString;\n    }\n  };\n  \n  // Format currency for display\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(amount);\n  };\n  \n  // Change region filter\n  const handleRegionChange = (newRegion: 'all' | 'north-america' | 'europe' | 'asia-pacific' | 'latin-america') => {\n    setLocalRegion(newRegion);\n    \n    // Notify about filter changes if rendering performance tracking is enabled\n    if (onComponentRender) {\n      const updateStart = performance.now();\n      renderStartTime.current = updateStart;\n    }\n  };\n\n  // Change delivery status filter\n  const handleDeliveryStatusChange = (newStatus: 'all' | 'pending' | 'in-transit' | 'delivered') => {\n    setLocalDeliveryStatus(newStatus);\n  };\n  \n  // Change time period filter\n  const handleTimePeriodChange = (newPeriod: 'current-month' | 'last-3-months' | 'ytd' | 'custom') => {\n    setLocalTimePeriod(newPeriod);\n  };\n  \n  // Format date for last updated display\n  const formatLastUpdated = (date: Date | null): string => {\n    if (!date) return 'Never';\n    return date.toLocaleString('en-US', {\n      month: 'short', \n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric'\n    });\n  };\n  \n  // Get mock purchase orders for fallback\n  const getMockPurchaseOrders = (): Array<PurchaseOrder> => {\n    return [\n      {\n        header: {\n          poNumber: 'PO123456',\n          status: POStatus.CONFIRMED,\n          orderDate: '2025-03-01T08:00:00',\n          buyerInfo: {\n            firstName: 'John',\n            lastName: 'Doe',\n            email: 'john.doe@example.com'\n          },\n          syscoLocation: {\n            name: 'Denver Warehouse',\n            address: '123 Supply Chain Dr, Denver, CO'\n          },\n          deliveryInfo: {\n            date: '2025-03-15T08:00:00',\n            instructions: 'Deliver to loading dock B'\n          }\n        },\n        totalCost: 12500,\n        products: [{ supc: '123', description: 'Item 1', quantity: 100, fobCost: 125, total: 12500 }],\n        weights: { grossWeight: 1000, netWeight: 950 },\n        revision: 1\n      },\n      {\n        header: {\n          poNumber: 'PO123457',\n          status: POStatus.SHIPPED,\n          orderDate: '2025-03-05T10:30:00',\n          buyerInfo: {\n            firstName: 'Jane',\n            lastName: 'Smith',\n            email: 'jane.smith@example.com'\n          },\n          syscoLocation: {\n            name: 'Seattle Distribution',\n            address: '456 Logistics Ave, Seattle, WA'\n          },\n          deliveryInfo: {\n            date: '2025-03-18T09:00:00',\n            instructions: 'Call ahead 30 minutes before arrival'\n          }\n        },\n        totalCost: 8750,\n        products: [{ supc: '456', description: 'Item 2', quantity: 50, fobCost: 175, total: 8750 }],\n        weights: { grossWeight: 800, netWeight: 750 },\n        revision: 1\n      },\n      {\n        header: {\n          poNumber: 'PO123458',\n          status: POStatus.DELIVERED,\n          orderDate: '2025-03-10T09:15:00',\n          buyerInfo: {\n            firstName: 'Robert',\n            lastName: 'Johnson',\n            email: 'robert.johnson@example.com'\n          },\n          syscoLocation: {\n            name: 'Atlanta Hub',\n            address: '789 Supply St, Atlanta, GA'\n          },\n          deliveryInfo: {\n            date: '2025-03-22T08:30:00'\n          }\n        },\n        totalCost: 4300,\n        products: [{ supc: '789', description: 'Item 3', quantity: 20, fobCost: 215, total: 4300 }],\n        weights: { grossWeight: 500, netWeight: 480 },\n        revision: 1\n      },\n      {\n        header: {\n          poNumber: 'PO123459',\n          status: POStatus.UPLOADED,\n          orderDate: '2025-03-12T14:00:00',\n          buyerInfo: {\n            firstName: 'Susan',\n            lastName: 'Miller',\n            email: 'susan.miller@example.com'\n          },\n          syscoLocation: {\n            name: 'Chicago Distribution',\n            address: '101 Warehouse Blvd, Chicago, IL'\n          },\n          deliveryInfo: {\n            date: '2025-03-25T10:00:00'\n          }\n        },\n        totalCost: 6200,\n        products: [{ supc: '101', description: 'Item 4', quantity: 40, fobCost: 155, total: 6200 }],\n        weights: { grossWeight: 600, netWeight: 575 },\n        revision: 1\n      },\n      // Add some international locations for better region filtering demo\n      {\n        header: {\n          poNumber: 'PO123460',\n          status: POStatus.CONFIRMED,\n          orderDate: '2025-03-15T08:00:00',\n          buyerInfo: {\n            firstName: 'Emma',\n            lastName: 'Clark',\n            email: 'emma.clark@example.com'\n          },\n          syscoLocation: {\n            name: 'London Distribution',\n            address: '10 Supply Chain St, London, UK'\n          },\n          deliveryInfo: {\n            date: '2025-03-25T09:00:00'\n          }\n        },\n        totalCost: 9500,\n        products: [{ supc: '234', description: 'Item 5', quantity: 75, fobCost: 126.67, total: 9500 }],\n        weights: { grossWeight: 850, netWeight: 800 },\n        revision: 1\n      },\n      {\n        header: {\n          poNumber: 'PO123461',\n          status: POStatus.SHIPPED,\n          orderDate: '2025-03-07T11:15:00',\n          buyerInfo: {\n            firstName: 'Takashi',\n            lastName: 'Yamamoto',\n            email: 'takashi.yamamoto@example.com'\n          },\n          syscoLocation: {\n            name: 'Tokyo Warehouse',\n            address: '1-1 Supply Chain, Minato-ku, Tokyo, Japan'\n          },\n          deliveryInfo: {\n            date: '2025-03-20T10:00:00'\n          }\n        },\n        totalCost: 7800,\n        products: [{ supc: '345', description: 'Item 6', quantity: 60, fobCost: 130, total: 7800 }],\n        weights: { grossWeight: 700, netWeight: 650 },\n        revision: 1\n      },\n      {\n        header: {\n          poNumber: 'PO123462',\n          status: POStatus.INVOICED,\n          orderDate: '2025-03-09T09:45:00',\n          buyerInfo: {\n            firstName: 'Carlos',\n            lastName: 'Rodriguez',\n            email: 'carlos.rodriguez@example.com'\n          },\n          syscoLocation: {\n            name: 'São Paulo Distribution',\n            address: 'Avenida Paulista 1000, São Paulo, Brazil'\n          },\n          deliveryInfo: {\n            date: '2025-03-21T14:00:00'\n          }\n        },\n        totalCost: 5600,\n        products: [{ supc: '456', description: 'Item 7', quantity: 40, fobCost: 140, total: 5600 }],\n        weights: { grossWeight: 550, netWeight: 520 },\n        revision: 1\n      },\n      {\n        header: {\n          poNumber: 'PO123463',\n          status: POStatus.DELIVERED,\n          orderDate: '2025-03-05T08:30:00',\n          buyerInfo: {\n            firstName: 'James',\n            lastName: 'Wilson',\n            email: 'james.wilson@example.com'\n          },\n          syscoLocation: {\n            name: 'Sydney Warehouse',\n            address: '200 Supply Road, Sydney, Australia'\n          },\n          deliveryInfo: {\n            date: '2025-03-18T09:30:00'\n          }\n        },\n        totalCost: 8900,\n        products: [{ supc: '567', description: 'Item 8', quantity: 70, fobCost: 127.14, total: 8900 }],\n        weights: { grossWeight: 780, netWeight: 750 },\n        revision: 1\n      }\n    ];\n  };\n\n  // Render loading state\n  if (loading) {\n    return (\n      <div className={`geographic-map ${className}`}>\n        <Card className=\"h-100 shadow-sm\">\n          <Card.Body className=\"d-flex justify-content-center align-items-center\" style={{ minHeight: '500px' }}>\n            <div className=\"text-center\">\n              <Spinner animation=\"border\" variant=\"primary\" />\n              <p className=\"mt-3 text-muted\">Loading map data...</p>\n              <p className=\"text-muted small\">This may take a moment while we geocode locations.</p>\n            </div>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n  \n  return (\n    <div className={`geographic-map ${className}`}>\n      <Card className=\"h-100 shadow-sm\">\n        <Card.Header className=\"bg-light py-3\">\n          <div className=\"d-flex justify-content-between align-items-center mb-3\">\n            <h5 className=\"mb-0\">\n              <i className=\"bi bi-geo-alt me-2\"></i>\n              Geographic Map\n            </h5>\n            \n            <div className=\"d-flex align-items-center\">\n              {/* Total PO counter */}\n              <Badge bg=\"primary\" className=\"me-3 py-2 px-3\">\n                {mapMarkers.length} POs shown {poCount !== mapMarkers.length ? `(filtered from ${poCount})` : ''}\n              </Badge>\n              \n              {/* Selection badge */}\n              {selectedPOs.length > 0 && (\n                <Badge bg=\"success\" className=\"me-3 py-2 px-3\">\n                  {selectedPOs.length} POs selected\n                </Badge>\n              )}\n            \n              {/* Last updated */}\n              <div className=\"text-muted small me-3\">\n                <i className=\"bi bi-clock me-1\"></i>\n                Last updated: {formatLastUpdated(lastUpdated)}\n              </div>\n              \n              {/* Refresh button */}\n              <Button \n                variant=\"outline-primary\" \n                size=\"sm\"\n                onClick={fetchPurchaseOrders}\n                disabled={isRefreshing}\n                className=\"me-1\"\n              >\n                {isRefreshing ? (\n                  <>\n                    <Spinner animation=\"border\" size=\"sm\" className=\"me-1\" />\n                    Refreshing...\n                  </>\n                ) : (\n                  <><i className=\"bi bi-arrow-repeat me-1\"></i> Refresh</>\n                )}\n              </Button>\n            </div>\n          </div>\n          \n          {/* Filter controls */}\n          <div className=\"d-flex flex-wrap align-items-center mt-2 gap-2\">\n            {/* Search box */}\n            <div className=\"flex-grow-1 me-2\">\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Search by PO #, location, or buyer\"\n                value={searchText}\n                onChange={(e) => setSearchText(e.target.value)}\n              />\n            </div>\n            \n            {/* Region filter */}\n            <Dropdown>\n              <Dropdown.Toggle variant=\"outline-secondary\" size=\"sm\">\n                <i className=\"bi bi-globe me-1\"></i> \n                {localRegion === 'all' ? 'All Regions' : \n                 localRegion === 'north-america' ? 'North America' : \n                 localRegion === 'europe' ? 'Europe' : \n                 localRegion === 'asia-pacific' ? 'Asia Pacific' : 'Latin America'}\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item \n                  active={localRegion === 'all'}\n                  onClick={() => handleRegionChange('all')}\n                >\n                  All Regions\n                </Dropdown.Item>\n                <Dropdown.Item \n                  active={localRegion === 'north-america'}\n                  onClick={() => handleRegionChange('north-america')}\n                >\n                  North America\n                </Dropdown.Item>\n                <Dropdown.Item \n                  active={localRegion === 'europe'}\n                  onClick={() => handleRegionChange('europe')}\n                >\n                  Europe\n                </Dropdown.Item>\n                <Dropdown.Item \n                  active={localRegion === 'asia-pacific'}\n                  onClick={() => handleRegionChange('asia-pacific')}\n                >\n                  Asia Pacific\n                </Dropdown.Item>\n                <Dropdown.Item \n                  active={localRegion === 'latin-america'}\n                  onClick={() => handleRegionChange('latin-america')}\n                >\n                  Latin America\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n            \n            {/* Status filter */}\n            <Dropdown>\n              <Dropdown.Toggle variant=\"outline-secondary\" size=\"sm\">\n                <i className=\"bi bi-funnel me-1\"></i> \n                {localDeliveryStatus === 'all' ? 'All Statuses' : \n                 localDeliveryStatus === 'pending' ? 'Pending' : \n                 localDeliveryStatus === 'in-transit' ? 'In Transit' : 'Delivered'}\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item \n                  active={localDeliveryStatus === 'all'}\n                  onClick={() => handleDeliveryStatusChange('all')}\n                >\n                  All Statuses\n                </Dropdown.Item>\n                <Dropdown.Item \n                  active={localDeliveryStatus === 'pending'}\n                  onClick={() => handleDeliveryStatusChange('pending')}\n                >\n                  Pending\n                </Dropdown.Item>\n                <Dropdown.Item \n                  active={localDeliveryStatus === 'in-transit'}\n                  onClick={() => handleDeliveryStatusChange('in-transit')}\n                >\n                  In Transit\n                </Dropdown.Item>\n                <Dropdown.Item \n                  active={localDeliveryStatus === 'delivered'}\n                  onClick={() => handleDeliveryStatusChange('delivered')}\n                >\n                  Delivered\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n            \n            {/* Time period filter */}\n            <Dropdown>\n              <Dropdown.Toggle variant=\"outline-secondary\" size=\"sm\">\n                <i className=\"bi bi-calendar me-1\"></i> \n                {localTimePeriod === 'current-month' ? 'Current Month' : \n                 localTimePeriod === 'last-3-months' ? 'Last 3 Months' : \n                 localTimePeriod === 'ytd' ? 'Year to Date' : 'Custom'}\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item \n                  active={localTimePeriod === 'current-month'}\n                  onClick={() => handleTimePeriodChange('current-month')}\n                >\n                  Current Month\n                </Dropdown.Item>\n                <Dropdown.Item \n                  active={localTimePeriod === 'last-3-months'}\n                  onClick={() => handleTimePeriodChange('last-3-months')}\n                >\n                  Last 3 Months\n                </Dropdown.Item>\n                <Dropdown.Item \n                  active={localTimePeriod === 'ytd'}\n                  onClick={() => handleTimePeriodChange('ytd')}\n                >\n                  Year to Date\n                </Dropdown.Item>\n                <Dropdown.Item \n                  active={localTimePeriod === 'custom'}\n                  onClick={() => handleTimePeriodChange('custom')}\n                >\n                  Custom Range\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n            \n            {/* Batch selection button */}\n            <Button\n              variant={selectionMode ? \"primary\" : \"outline-secondary\"}\n              size=\"sm\"\n              onClick={toggleSelectionMode}\n            >\n              <i className={`bi bi-${selectionMode ? 'check-square' : 'square'} me-1`}></i>\n              {selectionMode ? 'Selection Mode On' : 'Select POs'}\n            </Button>\n            \n            {/* Clear selection button (only visible when selections exist) */}\n            {selectedPOs.length > 0 && (\n              <Button\n                variant=\"outline-danger\"\n                size=\"sm\"\n                onClick={clearSelections}\n              >\n                <i className=\"bi bi-x-circle me-1\"></i>\n                Clear Selection\n              </Button>\n            )}\n            \n            {/* Zoom controls */}\n            <div className=\"btn-group ms-auto\" role=\"group\" aria-label=\"Zoom controls\">\n              <Button \n                variant=\"outline-secondary\" \n                size=\"sm\" \n                onClick={() => mapInstance?.zoomIn()}\n              >\n                <i className=\"bi bi-plus\"></i>\n              </Button>\n              <Button \n                variant=\"outline-secondary\" \n                size=\"sm\" \n                onClick={() => mapInstance?.zoomOut()}\n              >\n                <i className=\"bi bi-dash\"></i>\n              </Button>\n            </div>\n          </div>\n        </Card.Header>\n        \n        <Card.Body className=\"p-0\">\n          {error && (\n            <Alert variant=\"warning\" className=\"m-3 mb-0\" dismissible onClose={() => setError(null)}>\n              <small>{error}</small>\n            </Alert>\n          )}\n          \n          {selectionMode && (\n            <Alert variant=\"info\" className=\"m-3 mb-0\">\n              <div className=\"d-flex justify-content-between align-items-center\">\n                <small>\n                  <i className=\"bi bi-info-circle me-2\"></i>\n                  Selection mode is active. Click on markers to select/deselect POs for batch operations.\n                </small>\n                <Button variant=\"outline-info\" size=\"sm\" onClick={toggleSelectionMode}>\n                  Exit Selection Mode\n                </Button>\n              </div>\n            </Alert>\n          )}\n          \n          <div className=\"map-container\">\n            <div \n              ref={mapContainerRef} \n              style={{ height: '500px', width: '100%' }}\n            ></div>\n          </div>\n          \n          <div className=\"map-legend-container d-flex justify-content-between mt-2 px-3 py-2 bg-light\">\n            <div className=\"d-flex flex-wrap gap-3\">\n              {Object.values(POStatus).map(status => (\n                <div key={status} className=\"d-flex align-items-center\">\n                  <div \n                    className=\"rounded-circle me-1\" \n                    style={{ \n                      width: '12px', \n                      height: '12px', \n                      backgroundColor: getStatusColor(status)\n                    }}\n                  ></div>\n                  <span className=\"small\">{status}</span>\n                </div>\n              ))}\n              <div className=\"d-flex align-items-center ms-3\">\n                <div \n                  className=\"rounded-circle me-1\" \n                  style={{ \n                    width: '16px', \n                    height: '16px', \n                    backgroundColor: '#3F51B5',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    fontSize: '10px',\n                    color: 'white',\n                    fontWeight: 'bold'\n                  }}\n                >\n                  n\n                </div>\n                <span className=\"small\">Cluster</span>\n              </div>\n            </div>\n            \n            <div className=\"small text-muted\">\n              <i className=\"bi bi-info-circle me-1\"></i>\n              {mapMarkers.length} POs displayed • Click on markers for details\n            </div>\n          </div>\n        </Card.Body>\n      </Card>\n      \n      {/* Component styles */}\n      <style>\n        {`\n          .map-marker div {\n            width: 100%;\n            height: 100%;\n            border-radius: 50%;\n            border: 2px solid white;\n            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\n          }\n          \n          .map-marker.selected div {\n            border: 3px solid #FFC107 !important;\n            box-shadow: 0 0 8px rgba(255, 193, 7, 0.6);\n          }\n          \n          .marker-info-popup h6 {\n            margin-bottom: 0.5rem;\n          }\n          \n          .marker-info-popup .status-badge {\n            display: inline-block;\n            padding: 2px 6px;\n            border-radius: 4px;\n            font-size: 0.75rem;\n            font-weight: bold;\n            color: white;\n          }\n          \n          .marker-info-popup .status-badge.uploaded { background-color: #FF9800; }\n          .marker-info-popup .status-badge.confirmed { background-color: #2196F3; }\n          .marker-info-popup .status-badge.shipped { background-color: #673AB7; }\n          .marker-info-popup .status-badge.invoiced { background-color: #3F51B5; }\n          .marker-info-popup .status-badge.delivered { background-color: #4CAF50; }\n          .marker-info-popup .status-badge.cancelled { background-color: #F44336; }\n          \n          .marker-info-popup .view-details-btn,\n          .marker-info-popup .select-po-btn {\n            padding: 2px 8px;\n            background-color: #3F51B5;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 0.75rem;\n          }\n          \n          .marker-info-popup .select-po-btn {\n            background-color: #6c757d;\n          }\n        `}\n      </style>\n    </div>\n  );\n};\n\nexport default GeographicMap;"],"names":["GeographicMap","region","deliveryStatus","timePeriod","onPOSelect","onBatchSelectionChange","onComponentRender","className","renderStartTime","useRef","mapContainerRef","mapInstance","setMapInstance","useState","markersLayer","setMarkersLayer","infoPopup","setInfoPopup","loading","setLoading","isRefreshing","setIsRefreshing","error","setError","lastUpdated","setLastUpdated","mapMarkers","setMapMarkers","selectedPOs","setSelectedPOs","selectionMode","setSelectionMode","poCount","setPOCount","localRegion","setLocalRegion","localDeliveryStatus","setLocalDeliveryStatus","localTimePeriod","setLocalTimePeriod","searchText","setSearchText","getMapSettings","regionValue","center","zoom","geocodeAddress","async","address","Promise","resolve","setTimeout","lowerCase","toLowerCase","includes","lat","lng","Math","random","Logger","fetchPurchaseOrders","useCallback","current","performance","now","Date","startDate","setMonth","getMonth","getFullYear","response","ApiService","fetchPOs","toISOString","endDate","limit","data","length","info","processPurchaseOrders","renderTime","err","Error","message","purchaseOrders","filteredPOs","filterPurchaseOrders","markers","createMapMarkers","updateMapMarkers","debug","_regionFilter","statusFilter","filter","po","searchLower","header","poNumber","_a","syscoLocation","name","_b","buyerInfo","firstName","_c","lastName","POStatus","UPLOADED","CONFIRMED","status","SHIPPED","DELIVERED","INVOICED","posWithLocation","i","batch","slice","all","map","coords","id","location","totalCost","deliveryDate","deliveryInfo","date","selected","forEach","result","push","marker","clearLayers","SimulatedMarkerCluster","L","layerGroup","icon","divIcon","html","getStatusColor","iconSize","iconAnchor","leafletMarker","on","e","toggleMarkerSelection","originalEvent","stopPropagation","handleMarkerClick","addLayer","bounds","featureGroup","m","getBounds","getZoom","fitBounds","padding","maxZoom","prev","newSelection","p","toggleSelectionMode","clearSelections","useEffect","setView","tileLayer","attribution","addTo","remove","updateStart","popup","setLatLng","setContent","formatCurrency","formatDate","openOn","viewDetailsBtn","document","querySelector","addEventListener","selectPOBtn","close","CANCELLED","dateString","toLocaleDateString","year","month","day","amount","Intl","NumberFormat","style","currency","format","handleRegionChange","newRegion","handleDeliveryStatusChange","newStatus","handleTimePeriodChange","newPeriod","jsxRuntimeExports","jsx","children","Card","Body","minHeight","jsxs","Spinner","animation","variant","Header","Badge","bg","toLocaleString","hour","minute","Button","size","onClick","disabled","Fragment","Form","Control","type","placeholder","value","onChange","target","Dropdown","Toggle","Menu","Item","active","role","zoomIn","zoomOut","Alert","dismissible","onClose","ref","height","width","Object","values","backgroundColor","display","alignItems","justifyContent","fontSize","color","fontWeight"],"mappings":"gMA6CA,MAAMA,EAA8C,EAClDC,SAAS,MACTC,iBAAiB,MACjBC,aAAa,gBACbC,aACAC,yBACAC,oBACAC,YAAY,OAGN,MAAAC,EAAkBC,SAAe,GAGjCC,EAAkBD,SAAuB,OAGxCE,EAAaC,GAAkBC,EAAAA,SAAuB,OACtDC,EAAcC,GAAmBF,EAAAA,SAA8B,OAC/DG,EAAWC,GAAgBJ,EAAAA,SAAyB,OAGpDK,EAASC,GAAcN,EAAAA,UAAkB,IACzCO,EAAcC,GAAmBR,EAAAA,UAAkB,IACnDS,EAAOC,GAAYV,EAAAA,SAAwB,OAC3CW,EAAaC,GAAkBZ,EAAAA,SAAsB,OAGrDa,EAAYC,GAAiBd,EAAAA,SAAsB,KACnDe,EAAaC,GAAkBhB,EAAAA,SAAmB,KAClDiB,EAAeC,GAAoBlB,EAAAA,UAAkB,IACrDmB,EAASC,GAAcpB,EAAAA,SAAiB,IAGxCqB,EAAaC,GAAkBtB,EAAAA,SAAiBZ,IAChDmC,EAAqBC,GAA0BxB,EAAAA,SAAiBX,IAChEoC,EAAiBC,GAAsB1B,EAAAA,SAAiBV,IACxDqC,EAAYC,GAAiB5B,EAAAA,SAAiB,IAG/C6B,EAAkBC,IACtB,OAAQA,GACN,IAAK,gBACH,MAAO,CAAEC,OAAQ,CAAC,SAAiB,SAAGC,KAAM,GAC9C,IAAK,SACH,MAAO,CAAED,OAAQ,CAAC,OAAS,SAAUC,KAAM,GAC7C,IAAK,eACH,MAAO,CAAED,OAAQ,CAAC,QAAS,UAAWC,KAAM,GAC9C,IAAK,gBACH,MAAO,CAAED,OAAQ,UAAkB,SAAGC,KAAM,GAC9C,QACE,MAAO,CAAED,OAAQ,CAAC,GAAM,GAAMC,KAAM,GAAE,EAMtCC,EAAiBC,MAAOC,IAGxB,UAEI,IAAIC,SAAQC,GAAWC,WAAWD,EAAS,MAG3C,MAAAE,EAAYJ,EAAQK,cAEtB,OAACL,EAGDI,EAAUE,SAAS,WAAaF,EAAUE,SAAS,YAC9C,CAAEC,IAAK,QAASC,KAAe,UAC7BJ,EAAUE,SAAS,YAAcF,EAAUE,SAAS,cACtD,CAAEC,IAAK,QAASC,KAAe,UAC7BJ,EAAUE,SAAS,YAAcF,EAAUE,SAAS,WACtD,CAAEC,IAAK,OAASC,KAAc,QAC5BJ,EAAUE,SAAS,YAAcF,EAAUE,SAAS,YACtD,CAAEC,IAAK,QAASC,KAAc,SAC5BJ,EAAUE,SAAS,aAAeF,EAAUE,SAAS,MACvD,CAAEC,IAAK,QAASC,KAAc,QAC5BJ,EAAUE,SAAS,gBAAkBF,EAAUE,SAAS,MAC1D,CAAEC,IAAK,QAASC,KAAe,UAC7BJ,EAAUE,SAAS,UAAYF,EAAUE,SAAS,WACpD,CAAEC,IAAK,QAASC,KAAc,SAC5BJ,EAAUE,SAAS,WAAaF,EAAUE,SAAS,iBACrD,CAAEC,IAAK,QAASC,KAAc,SAC5BJ,EAAUE,SAAS,WAAaF,EAAUE,SAAS,MACrD,CAAEC,IAAK,QAASC,KAAa,OAC3BJ,EAAUE,SAAS,UAAYF,EAAUE,SAAS,UACpD,CAAEC,IAAK,QAASC,IAAK,QACnBJ,EAAUE,SAAS,UAAYF,EAAUE,SAAS,SACpD,CAAEC,IAAK,QAASC,IAAK,UACnBJ,EAAUE,SAAS,WAAaF,EAAUE,SAAS,aACrD,CAAEC,KAAe,QAAAC,IAAK,UACpBJ,EAAUE,SAAS,cAAgBF,EAAUE,SAAS,UACxD,CAAEC,KAAe,QAAAC,KAAc,SAC7BJ,EAAUE,SAAS,UACrB,CAAEC,IAAK,QAASC,KAAc,SAInCJ,EAAUE,SAAS,OAASF,EAAUE,SAAS,OAASF,EAAUE,SAAS,MAEtE,CACLC,IAAgC,EAAhBE,KAAKC,SAAe,IAA/B,QACLF,IAAiC,GAAhBC,KAAKC,SAAgB,EAAjC,SAEEN,EAAUE,SAAS,OAASF,EAAUE,SAAS,YAAcF,EAAUE,SAAS,UAElF,CACLC,IAA6B,EAAhBE,KAAKC,SAAe,IAA5B,GACLF,IAA6B,GAAhBC,KAAKC,SAAgB,EAA7B,IAEEN,EAAUE,SAAS,UAAYF,EAAUE,SAAS,UAAYF,EAAUE,SAAS,aAEnF,CACLC,IAA6B,GAAhBE,KAAKC,SAAgB,EAA7B,GACLF,IAA8B,GAAhBC,KAAKC,SAAgB,GAA9B,KAEEN,EAAUE,SAAS,WAAaF,EAAUE,SAAS,WAAaF,EAAUE,SAAS,aAErF,CACLC,IAA8B,GAAhBE,KAAKC,SAAgB,EAA9B,GACLF,IAA8B,GAAhBC,KAAKC,SAAgB,EAA9B,IAKF,CACLH,IAAkC,IAAZ,IAAhBE,KAAKC,SAAiB,IAC5BF,IAAmC,IAAb,IAAhBC,KAAKC,SAAiB,MA/DT,WAiEdpC,GAEA,OADAqC,EAAArC,MAAM,mBAAoBA,GAC1B,IAAA,GA4BLsC,GAAsBC,EAAAA,aAAYd,UAEtBvC,EAAAsD,QAAUC,YAAYC,MAGpC3C,GADEH,GAMA,IAEI,MAAA8C,MAAUC,KACZ,IAAAC,EAAY,IAAID,KAAKD,GAEzB,OAAQ1B,GACN,IAAK,gBASL,QACE4B,EAAUC,SAASD,EAAUE,WAAa,SAP5C,IAAK,gBACHF,EAAUC,SAASD,EAAUE,WAAa,GAC1C,MACF,IAAK,MACHF,EAAY,IAAID,KAAKD,EAAIK,cAAe,EAAG,GAOzC,MAAAC,QAAiBC,EAAWC,SAAS,CACzCN,UAAWA,EAAUO,cACrBC,QAASV,EAAIS,cACbE,MAAO,MAGT,GAAIL,GAAYA,EAASM,MAAQN,EAASM,KAAKC,OAAS,GAQtD,GAPAlB,EAAOmB,KAAK,SAASR,EAASM,KAAKC,sBACxB5C,EAAAqC,EAASM,KAAKC,cACnBE,GAAsBT,EAASM,MACtBnD,EAAA,IAAIwC,MACnB1C,EAAS,MAGLjB,EAAmB,CACrB,MAAM0E,EAAajB,YAAYC,MAAQxD,EAAgBsD,QACvDxD,EAAkB0E,EAAU,OAG9BrB,EAAOmB,KAAK,gBACZvD,EAAS,4DAgBPU,EAAW,GACXN,EAAc,IACCF,EAAA,IAAIwC,YAGhBgB,GACAtB,EAAArC,MAAM,kCAAmC2D,GAChD1D,EAAS0D,aAAeC,MAAQD,EAAIE,QAAU,2BAe5ClD,EAAW,GACXN,EAAc,GAChB,CACA,QACAR,GAAW,GACXE,GAAgB,EAAK,IAEtB,CAACa,EAAaE,EAAqBE,IAGhCyC,GAAwBhC,MAAOqC,IAC/B,IAEF,MAAMC,EAAcC,GAAqBF,EAAgBlD,EAAaE,GAGhEmD,QAAgBC,GAAiBH,GAIvC,GAHA1D,EAAc4D,GAGV5E,GAAeG,IACjB2E,GAAiBF,GAGbjF,GAAqBE,EAAgBsD,QAAU,GAAG,CACpD,MAAMkB,EAAajB,YAAYC,MAAQxD,EAAgBsD,QAChDH,EAAA+B,MAAM,8BAA8BV,MAAc,QAGtDC,GACAtB,EAAArC,MAAM,oCAAqC2D,GAClD1D,EAAS0D,aAAeC,MAAQD,EAAIE,QAAU,6BAA4B,GAKxEG,GAAuB,CAC3BF,EACAO,EACAC,IAEOR,EAAeS,QAAaC,cAEjC,GAAItD,EAAY,CACR,MAAAuD,EAAcvD,EAAWa,cAO3B,KALFyC,EAAGE,OAAOC,SAAS5C,cAAcC,SAASyC,KAC1C,OAAAG,EAAAJ,EAAGE,OAAOG,wBAAeC,KAAK/C,cAAcC,SAASyC,MACrD,OAAAM,EAAGP,EAAAE,OAAOM,gBAAV,EAAAD,EAAqBE,UAAUlD,cAAcC,SAASyC,MACtD,OAAAS,EAAAV,EAAGE,OAAOM,gBAAW,EAAAE,EAAAC,SAASpD,cAAcC,SAASyC,KAE5B,OAAA,CAAA,CAI7B,GAAqB,QAAjBH,EAAwB,CAC1B,GAAqB,YAAjBA,IAA+B,CAACc,EAASC,SAAUD,EAASE,WAAWtD,SAASwC,EAAGE,OAAOa,QACrF,OAAA,EAEL,GAAiB,eAAjBjB,IAAkC,CAACc,EAASI,SAASxD,SAASwC,EAAGE,OAAOa,QACnE,OAAA,EAET,GAAqB,cAAjBjB,IAAiC,CAACc,EAASK,UAAWL,EAASM,UAAU1D,SAASwC,EAAGE,OAAOa,QACvF,OAAA,CACT,CAIK,OAAA,CAAA,IAKLrB,GAAmBzC,MAAOqC,IAExB,MAAA6B,EAAkB7B,EAAeS,QAAaC,GAC3CA,EAAGE,QAAUF,EAAGE,OAAOG,eAAiBL,EAAGE,OAAOG,cAAcC,OAInEb,EAAuB,GAG7B,IAAA,IAAS2B,EAAI,EAAGA,EAAID,EAAgBpC,OAAQqC,GAF1B,EAE0C,CAC1D,MAAMC,EAAQF,EAAgBG,MAAMF,EAAGA,EAHvB,UAMWjE,QAAQoE,IACjCF,EAAMG,KAAIvE,MAAO+C,UACX,IAEF,MAAM9C,EAAU8C,EAAGE,OAAOG,cAAcnD,SAAW8C,EAAGE,OAAOG,cAAcC,KAGrEmB,QAAezE,EAAeE,GAEhC,IAACuE,EAAe,OAAA,KAeb,MAZmB,CACxBC,GAAI1B,EAAGE,OAAOC,SACdA,SAAUH,EAAGE,OAAOC,SACpB1C,IAAKgE,EAAOhE,IACZC,IAAK+D,EAAO/D,IACZqD,OAAQf,EAAGE,OAAOa,OAClBY,SAAU3B,EAAGE,OAAOG,cAAcC,KAClCsB,UAAW5B,EAAG4B,UACdC,aAAc,OAAAzB,EAAAJ,EAAGE,OAAO4B,mBAAc,EAAA1B,EAAA2B,KACtCC,SAAUlG,EAAY0B,SAASwC,EAAGE,OAAOC,iBAIpC3E,GAEA,OADPqC,EAAOrC,MAAM,uBAAuBwE,EAAGE,OAAOC,YAAa3E,GACpD,IAAA,OAMAyG,SAAkBC,IACd,OAAXA,GACFzC,EAAQ0C,KAAKD,EAAM,GAEtB,CAIH,MAAoB,QAAhB9F,EACKqD,EAAQM,QAAiBqC,IAhPH,IAAC3E,EAAaC,EAkPzC,OAlP4BD,EAiPkB2E,EAAO3E,IAjPZC,EAiPiB0E,EAAO1E,IA/OjED,GAAO,IAAMA,GAAO,IAAMC,IAAO,KAAQA,IAAY,GAChD,gBAGAD,GAAO,IAAMA,GAAO,IAAMC,IAAO,IAAOA,GAAO,GAC/C,SAGCD,IAAO,IAAOA,GAAO,IAAMC,GAAO,IAAMA,GAAO,KAC/CD,QAAcA,GAAO,IAAMC,IAAO,KAAQA,IAAc,IACzD,eAGAD,IAAc,IAAAA,GAAO,IAAMC,IAAO,KAAQA,IAAY,GACtD,gBAGF,WA+NqBtB,CAAA,IAIrBqD,CAAA,EAIHE,GAAmB5B,eAAa0B,IAChC,IAAC5E,IAAgBG,EAAc,OAGnCA,EAAaqH,cAIP,MAAAC,EAAyBC,EAAEC,aA+B7B,GA5BI/C,EAAAwC,SAAkBG,IAClB,MAAAK,EAAOF,EAAEG,QAAQ,CACrBjI,UAAW,qBAAqB2H,EAAOrB,OAAOxD,iBAAiB6E,EAAOJ,SAAW,WAAa,KAC9FW,KAAM,iCAAiCC,GAAeR,EAAOrB,YAAYqB,EAAOJ,SAAW,6BAA+B,aAC1Ha,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,MAGbC,EAAgBR,EAAEH,OAAO,CAACA,EAAO3E,IAAK2E,EAAO1E,KAAM,CAAE+E,SACxDO,GAAG,SAAUC,IAERjH,GACFkH,GAAsBd,EAAOjC,UAE7B8C,EAAEE,cAAcC,mBAEhBC,GAAkBjB,EAAM,IAK9BE,EAAuBgB,SAASP,EAAa,IAI/C/H,EAAasI,SAAShB,GAGlB7C,EAAQV,OAAS,EACf,IACF,MAAMwE,EAAShB,EAAEiB,aACf/D,EAAQ+B,KAAIiC,GAAKlB,EAAEH,OAAO,CAACqB,EAAEhG,IAAKgG,EAAE/F,SACpCgG,aAGEjE,EAAQV,OAAS,GAAKlE,EAAY8I,UAAY,IAChD9I,EAAY+I,UAAUL,EAAQ,CAC5BM,QAAS,CAAC,GAAI,IACdC,QAAS,WAGNtI,GACAqC,EAAArC,MAAM,wBAAyBA,EAAK,CAC7C,GAED,CAACX,EAAaG,EAAcgB,EAAeF,IAGxCoH,GAAyB/C,IAC7BtE,MACEkI,EAAKvC,KAAIY,GACPA,EAAOjC,WAAaA,EAChB,IAAKiC,EAAQJ,UAAWI,EAAOJ,UAC/BI,MAIRrG,GAAuBgI,IACf,MACAC,EADaD,EAAKvG,SAAS2C,GAE7B4D,EAAKhE,QAAOkE,GAAKA,IAAM9D,IACvB,IAAI4D,EAAM5D,GAOP,OAJH5F,GACFA,EAAuByJ,GAGlBA,CAAA,GACR,EAIGE,GAAsB,KACTjI,GAAA8H,IAASA,IAGtB/H,GACcmI,IAAA,EAKdA,GAAkB,KACtBpI,EAAe,IACfF,GAAckI,GACZA,EAAKvC,KAAIY,IAAW,IAAKA,EAAQJ,UAAU,QAIzCzH,GACFA,EAAuB,GAAE,EAK7B6J,EAAAA,WAAU,KACJ,IAACxJ,EAAgBoD,QAAS,OAGdtD,EAAAsD,QAAUC,YAAYC,MAEtC,MAAMpB,OAAEA,EAAAC,KAAQA,GAASH,EAAeR,GAGlCoF,EAAMe,EAAEf,IAAI5G,EAAgBoD,SAASqG,QAAQvH,EAAQC,GAG3DwF,EAAE+B,UAAU,qDAAsD,CAChEC,YAAa,4FACZC,MAAMhD,GAGT,MAAMgB,EAAaD,EAAEC,aAAagC,MAAMhD,GAYxC,OATA1G,EAAe0G,GACfvG,EAAgBuH,GAGI1E,KAEpBD,EAAO+B,MAAM,4BAA4B3B,YAAYC,MAAQxD,EAAgBsD,aAGtE,KACLwD,EAAIiD,SACJ3J,EAAe,MACfG,EAAgB,KAAI,CACtB,GACC,IAGHmJ,EAAAA,WAAU,KACR,GAAIvJ,GAAeG,EAAc,CAGfN,EAAAsD,QAAUC,YAAYC,MAEtC,MAAMpB,OAAEA,EAAAC,KAAQA,GAASH,EAAeR,GAC5BvB,EAAAwJ,QAAQvH,EAAQC,GAGRe,IAAA,IAErB,CAAC1B,EAAaE,EAAqBE,EAAiBsB,KAGvDsG,EAAAA,WAAU,KACR,GAAIxI,EAAWmD,OAAS,GAAKlE,GAAeG,EAAc,CAElD,MAAA0J,EAAczG,YAAYC,MAEhCyB,GAAiB/D,GAEjBiC,EAAO+B,MAAM,4BAA4B3B,YAAYC,MAAQwG,MAAe,IAE7E,CAAC5I,EAAaF,EAAY+D,KAGvB,MAAA0D,GAAqBjB,IAErBlH,GACFA,EAAUuJ,SAIZ,MAAME,EAAQpC,EAAEoC,QACbC,UAAU,CAACxC,EAAO3E,IAAK2E,EAAO1E,MAC9BmH,WAAW,4DAEFzC,EAAOjC,sFAEiBiC,EAAOrB,OAAOxD,kBAAkB6E,EAAOrB,2FAEtBqB,EAAOT,uEACVmD,GAAe1C,EAAOR,+BAChEQ,EAAOP,aACP,gDAAgDkD,GAAW3C,EAAOP,sBAClE,8HAGIO,EAAOJ,SAAW,WAAa,iJAMxCgD,OAAOnK,GAGVwC,YAAW,KACH,MAAA4H,EAAiBC,SAASC,cAAc,qBAC1CF,GACaA,EAAAG,iBAAiB,SAAS,KACnC9K,GACFA,EAAW8H,EAAOjC,SAAQ,IAK1B,MAAAkF,EAAcH,SAASC,cAAc,kBACvCE,GACUA,EAAAD,iBAAiB,SAAS,KACpClC,GAAsBd,EAAOjC,UAC7BwE,EAAMW,OAAM,GACb,GAEF,GAGHnK,EAAawJ,EAAK,EAId/B,GAAkB7B,IACtB,OAAQA,GACN,KAAKH,EAASC,SAAiB,MAAA,UAC/B,KAAKD,EAASE,UAAkB,MAAA,UAChC,KAAKF,EAASI,QAAgB,MAAA,UAC9B,KAAKJ,EAASM,SAAiB,MAAA,UAC/B,KAAKN,EAASK,UAAkB,MAAA,UAChC,KAAKL,EAAS2E,UAAkB,MAAA,UAChC,QAAgB,MAAA,UAAA,EAKdR,GAAcS,IACd,IAACA,EAAmB,MAAA,MAEpB,IAEK,OADM,IAAIrH,KAAKqH,GACVC,mBAAmB,QAAS,CACtCC,KAAM,UACNC,MAAO,QACPC,IAAK,kBAEApK,GACA,OAAAgK,CAAA,GAKLV,GAAkBe,GACf,IAAIC,KAAKC,aAAa,QAAS,CACpCC,MAAO,WACPC,SAAU,QACTC,OAAOL,GAINM,GAAsBC,IAI1B,GAHA/J,EAAe+J,GAGX5L,EAAmB,CACf,MAAAkK,EAAczG,YAAYC,MAChCxD,EAAgBsD,QAAU0G,CAAA,GAKxB2B,GAA8BC,IAClC/J,EAAuB+J,EAAS,EAI5BC,GAA0BC,IAC9B/J,EAAmB+J,EAAS,EAgN9B,OAAIpL,EAECqL,EAAAC,IAAA,MAAI,CAAAjM,UAAW,kBAAkBA,IAChCkM,WAACD,IAAAE,EAAA,CAAKnM,UAAU,kBACdkM,SAACD,EAAAA,IAAAE,EAAKC,KAAL,CAAUpM,UAAU,mDAAmDuL,MAAO,CAAEc,UAAW,SAC1FH,WAACI,KAAA,MAAI,CAAAtM,UAAU,cACbkM,SAAA,OAACK,EAAQ,CAAAC,UAAU,SAASC,QAAQ,kBACnC,IAAA,CAAEzM,UAAU,kBAAkBkM,SAAmB,8BACjD,IAAA,CAAElM,UAAU,mBAAmBkM,SAAkD,uEAS3F,MAAA,CAAIlM,UAAW,kBAAkBA,IAChCkM,SAAA,GAACI,KAAAH,EAAA,CAAKnM,UAAU,kBACdkM,SAAA,QAACC,EAAKO,OAAL,CAAY1M,UAAU,gBACrBkM,SAAA,GAACI,KAAA,MAAA,CAAItM,UAAU,yDACbkM,SAAA,GAACI,KAAA,KAAA,CAAGtM,UAAU,OACZkM,SAAA,GAACD,IAAA,IAAA,CAAEjM,UAAU,uBAAyB,sBAIvCsM,KAAA,MAAI,CAAAtM,UAAU,4BAEbkM,SAAA,QAACS,EAAM,CAAAC,GAAG,UAAU5M,UAAU,iBAC3BkM,SAAA,CAAW/K,EAAAmD,OAAO,cAAY7C,IAAYN,EAAWmD,OAAS,kBAAkB7C,KAAa,MAI/FJ,EAAYiD,OAAS,GACnBgI,EAAAA,KAAAK,GAAMC,GAAG,UAAU5M,UAAU,iBAC3BkM,SAAA,CAAY7K,EAAAiD,OAAO,qBAKvBgI,KAAA,MAAI,CAAAtM,UAAU,wBACbkM,SAAA,GAACD,IAAA,IAAA,CAAEjM,UAAU,qBAAuB,kBArPvBsH,GAsPoBrG,EArPxCqG,GACEA,GAAKuF,eAAe,QAAS,CAClC3B,MAAO,QACPC,IAAK,UACL2B,KAAM,UACNC,OAAQ,YALQ,YAyPRf,EAAAC,IAACe,EAAA,CACCP,QAAQ,kBACRQ,KAAK,KACLC,QAAS7J,GACT8J,SAAUtM,EACVb,UAAU,OAETkM,WAEGI,EAAAA,KAAAc,EAAAA,SAAA,CAAAlB,SAAA,CAAAD,MAACM,GAAQC,UAAU,SAASS,KAAK,KAAKjN,UAAU,SAAS,mBAIzDsM,EAAAA,KAAAc,EAAAA,SAAA,CAAAlB,SAAA,GAACD,IAAA,IAAA,CAAEjM,UAAU,4BAA8B,wBAOpDsM,KAAA,MAAI,CAAAtM,UAAU,iDAEbkM,SAAA,GAACD,IAAA,MAAA,CAAIjM,UAAU,mBACbkM,SAAAF,EAAAC,IAACoB,EAAKC,QAAL,CACCC,KAAK,OACLC,YAAY,qCACZC,MAAOxL,EACPyL,SAAWlF,GAAMtG,EAAcsG,EAAEmF,OAAOF,kBAK3CG,EACC,CAAA1B,SAAA,CAAAI,OAACsB,EAASC,OAAT,CAAgBpB,QAAQ,oBAAoBQ,KAAK,KAChDf,SAAA,GAACD,IAAA,IAAA,CAAEjM,UAAU,qBACI,QAAhB2B,EAAwB,cACR,kBAAhBA,EAAkC,gBAClB,WAAhBA,EAA2B,SACX,iBAAhBA,EAAiC,eAAiB,mBAEpD2K,EAAAA,KAAAsB,EAASE,KAAT,CACC5B,SAAA,CAAAF,EAAAC,IAAC2B,EAASG,KAAT,CACCC,OAAwB,QAAhBrM,EACRuL,QAAS,IAAMxB,GAAmB,OACnCQ,SAAA,gBAGDF,EAAAC,IAAC2B,EAASG,KAAT,CACCC,OAAwB,kBAAhBrM,EACRuL,QAAS,IAAMxB,GAAmB,iBACnCQ,SAAA,kBAGDF,EAAAC,IAAC2B,EAASG,KAAT,CACCC,OAAwB,WAAhBrM,EACRuL,QAAS,IAAMxB,GAAmB,UACnCQ,SAAA,WAGDF,EAAAC,IAAC2B,EAASG,KAAT,CACCC,OAAwB,iBAAhBrM,EACRuL,QAAS,IAAMxB,GAAmB,gBACnCQ,SAAA,iBAGDF,EAAAC,IAAC2B,EAASG,KAAT,CACCC,OAAwB,kBAAhBrM,EACRuL,QAAS,IAAMxB,GAAmB,iBACnCQ,SAAA,+BAOJ0B,EACC,CAAA1B,SAAA,CAAAI,OAACsB,EAASC,OAAT,CAAgBpB,QAAQ,oBAAoBQ,KAAK,KAChDf,SAAA,GAACD,IAAA,IAAA,CAAEjM,UAAU,sBACY,QAAxB6B,EAAgC,eACR,YAAxBA,EAAoC,UACZ,eAAxBA,EAAuC,aAAe,eAExDyK,EAAAA,KAAAsB,EAASE,KAAT,CACC5B,SAAA,CAAAF,EAAAC,IAAC2B,EAASG,KAAT,CACCC,OAAgC,QAAxBnM,EACRqL,QAAS,IAAMtB,GAA2B,OAC3CM,SAAA,iBAGDF,EAAAC,IAAC2B,EAASG,KAAT,CACCC,OAAgC,YAAxBnM,EACRqL,QAAS,IAAMtB,GAA2B,WAC3CM,SAAA,YAGDF,EAAAC,IAAC2B,EAASG,KAAT,CACCC,OAAgC,eAAxBnM,EACRqL,QAAS,IAAMtB,GAA2B,cAC3CM,SAAA,eAGDF,EAAAC,IAAC2B,EAASG,KAAT,CACCC,OAAgC,cAAxBnM,EACRqL,QAAS,IAAMtB,GAA2B,aAC3CM,SAAA,2BAOJ0B,EACC,CAAA1B,SAAA,CAAAI,OAACsB,EAASC,OAAT,CAAgBpB,QAAQ,oBAAoBQ,KAAK,KAChDf,SAAA,GAACD,IAAA,IAAA,CAAEjM,UAAU,wBACQ,kBAApB+B,EAAsC,gBAClB,kBAApBA,EAAsC,gBAClB,QAApBA,EAA4B,eAAiB,YAE/CuK,EAAAA,KAAAsB,EAASE,KAAT,CACC5B,SAAA,CAAAF,EAAAC,IAAC2B,EAASG,KAAT,CACCC,OAA4B,kBAApBjM,EACRmL,QAAS,IAAMpB,GAAuB,iBACvCI,SAAA,kBAGDF,EAAAC,IAAC2B,EAASG,KAAT,CACCC,OAA4B,kBAApBjM,EACRmL,QAAS,IAAMpB,GAAuB,iBACvCI,SAAA,kBAGDF,EAAAC,IAAC2B,EAASG,KAAT,CACCC,OAA4B,QAApBjM,EACRmL,QAAS,IAAMpB,GAAuB,OACvCI,SAAA,iBAGDF,EAAAC,IAAC2B,EAASG,KAAT,CACCC,OAA4B,WAApBjM,EACRmL,QAAS,IAAMpB,GAAuB,UACvCI,SAAA,uBAOLF,EAAAM,KAACU,EAAA,CACCP,QAASlL,EAAgB,UAAY,oBACrC0L,KAAK,KACLC,QAASzD,GAETyC,SAAA,CAAAD,MAAC,KAAEjM,UAAW,SAASuB,EAAgB,eAAiB,kBACvDA,EAAgB,oBAAsB,gBAIxCF,EAAYiD,OAAS,GACpB0H,EAAAM,KAACU,EAAA,CACCP,QAAQ,iBACRQ,KAAK,KACLC,QAASxD,GAETwC,SAAA,GAACD,IAAA,IAAA,CAAEjM,UAAU,wBAA0B,4BAM1C,MAAI,CAAAA,UAAU,oBAAoBiO,KAAK,QAAQ,aAAW,gBACzD/B,SAAA,CAAAF,EAAAC,IAACe,EAAA,CACCP,QAAQ,oBACRQ,KAAK,KACLC,QAAS,IAAmB,MAAb9M,OAAa,EAAAA,EAAA8N,SAE5BhC,SAACD,EAAAA,IAAA,IAAE,CAAAjM,UAAU,iBAEfgM,EAAAC,IAACe,EAAA,CACCP,QAAQ,oBACRQ,KAAK,KACLC,QAAS,IAAmB,MAAb9M,OAAa,EAAAA,EAAA+N,UAE5BjC,SAACD,EAAAA,IAAA,IAAE,CAAAjM,UAAU,iCAMpBmM,EAAKC,KAAL,CAAUpM,UAAU,MAClBkM,SAAA,CAAAnL,SACEqN,EAAM,CAAA3B,QAAQ,UAAUzM,UAAU,WAAWqO,aAAW,EAACC,QAAS,IAAMtN,EAAS,MAChFkL,SAACF,EAAAC,IAAA,QAAA,CAAOC,eAIX3K,GACE0K,EAAAA,IAAAmC,EAAA,CAAM3B,QAAQ,OAAOzM,UAAU,WAC9BkM,WAACI,KAAA,MAAI,CAAAtM,UAAU,oDACbkM,SAAA,QAAC,QACC,CAAAA,SAAA,GAACD,IAAA,IAAA,CAAEjM,UAAU,2BAA6B,6FAG5CiM,EAAAA,IAACe,GAAOP,QAAQ,eAAeQ,KAAK,KAAKC,QAASzD,GAAqByC,SAEvE,+BAKLD,IAAA,MAAI,CAAAjM,UAAU,gBACbkM,SAAAF,EAAAC,IAAC,MAAA,CACCsC,IAAKpO,EACLoL,MAAO,CAAEiD,OAAQ,QAASC,MAAO,cAIpCnC,KAAA,MAAI,CAAAtM,UAAU,8EACbkM,SAAA,GAACI,KAAA,MAAA,CAAItM,UAAU,yBACZkM,SAAA,CAAOwC,OAAAC,OAAOxI,GAAUY,QACtBuF,EAAAA,KAAA,MAAA,CAAiBtM,UAAU,4BAC1BkM,SAAA,CAAAF,EAAAC,IAAC,MAAA,CACCjM,UAAU,sBACVuL,MAAO,CACLkD,MAAO,OACPD,OAAQ,OACRI,gBAAiBzG,GAAe7B,YAGnC,OAAA,CAAKtG,UAAU,QAASkM,SAAO5F,MATxBA,OAYXgG,KAAA,MAAI,CAAAtM,UAAU,iCACbkM,SAAA,CAAAF,EAAAC,IAAC,MAAA,CACCjM,UAAU,sBACVuL,MAAO,CACLkD,MAAO,OACPD,OAAQ,OACRI,gBAAiB,UACjBC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,SAAU,OACVC,MAAO,QACPC,WAAY,QAEfhD,SAAA,YAGA,OAAA,CAAKlM,UAAU,QAAQkM,SAAO,oBAIlCI,KAAA,MAAI,CAAAtM,UAAU,mBACbkM,SAAA,GAACD,IAAA,IAAA,CAAEjM,UAAU,2BACZmB,EAAWmD,OAAO,kEAO1B,QACE,CAAA4H,SAAA,6sDAhgBmB,IAAC5E,EAkjBzB"}